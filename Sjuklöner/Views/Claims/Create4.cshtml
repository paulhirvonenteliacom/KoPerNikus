@model Sjuklöner.Viewmodels.Create4VM
@{
    /**/

    ViewBag.Title = "Bilagor";
}

<div class="row margin-breadcrumb">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Ansökningar", "Index", null, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Personuppgifter och sjukperiod", "Create1", new { refNumber = Model.ClaimNumber }, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Timmar", "Create2", new { refNumber = Model.ClaimNumber }, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Belopp", "Create3", new { refNumber = Model.ClaimNumber }, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item active breadcrumb-font breadcrumb-padding" aria-current="page">Bilagor</li>
        </ol>
    </nav>
</div>

@using (Html.BeginForm("Create4", "Claims", new { noOfSubAssistants = Model.NumberOfSubAssistants }, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.ClaimNumber)
    <div class="row">
        <p class="col col-md-2"></p>
        <p class="page-header3 col col-md-10">Ansökan om sjuklöneersättning</p>
        <br>
    </div>    

    if (TempData["PdfSuccess"] != null)
    {
        <div class="alert positive-result row" id="PdfEventCreate4">
            <p class="col-md-nopadding col col-md-2"></p>
            <p class="negative-left-margin2 col col-md-10 line-height-10">@TempData["PdfSuccess"]</p>
        </div>
    }
    if (TempData["PdfFail"] != null)
    {
        <div class="alert negative-result row" id="PdfEventCreate4Fail">
            <p class="col-md-nopadding col col-md-2"></p>
            <p class="negative-left-margin2 col col-md-10 line-height-10">@TempData["PdfFail"]</p>
        </div>
    }
    <div class="row">
        <p class="col col-md-2"></p>
        <p class="col col-md-10 second-page-header2">Steg 4 av 4: Ladda upp bilagor och skicka in ansökan</p>
    </div>
    <div class="row">
        <div class="col col-md-1 no-col-padding">
            @Html.EditorFor(model => model.NumberOfSickDays, new { htmlAttributes = new { @class = "form-control hidden-field", id = "numberofsickdays" } })
        </div>
    </div>
    <div class="row">
        <div class="form-horizontal">
            <div class="row row-height-14">
                <div class="col col-md-2">

                </div>
                <div class="col col-md-10">
                    @Html.DisplayFor(modelItem => Model.RegAssistantSSNAndName)
                </div>
            </div>
            <div class="row row-height-26">
                <div class="col bold-14 label-align-top display-right-align col-md-2">
                    Lönespecifikation, ordinarie assistent
                </div>
                <div class="col-md-10" id="SalaryAttachmentDiv">
                    @if (!Model.SalaryAttachmentExists)
                    {
                        <input type="file" name="SalaryAttachment" id="SalaryAttachment" class="wide-input btn btn-default" onchange="checkErrors()" />
                    }
                    else
                    {
                        <p id="SalaryAttachmentButton">Det finns redan en lönespecifikation <button onclick="ReplaceFile(event, 'SalaryAttachment', 'SalaryAttachment')">Byt fil</button></p>
                    }
                </div>
            </div>
            <div class="row row-height-14 line-height-07">
                <div class="col col-md-offset-2 col-md-10">
                    @Html.ValidationMessageFor(model => model.SalaryAttachment, "", new { @class = "text-danger font-size-11", id = "salaryspec-regassistant-val" })
                </div>
            </div>
            <div class="row row-height-14">
            </div>

            @if (Model.NumberOfSickDays > 7)
            {
                <div class="row row-height-26 row-top-margin align-bottom4">
                    <div class="col col-md-2">

                    </div>
                    <div class="col col-md-10">
                        @Html.DisplayFor(modelItem => Model.RegAssistantSSNAndName)
                    </div>
                </div>
                <div class="row row-height-26">
                    <div class="col bold-14 padding-top-10 display-right-align col-md-2">
                        Läkarintyg
                    </div>
                    <div class="col-md-10" id="DoctorsCertificateDiv">
                        @if (!Model.DoctorsCertificateExists)
                        {
                            <input type="file" name="DoctorsCertificate" id="DoctorsCertificate" class="wide-input btn btn-default" onchange="checkErrors()" />
                        }
                        else
                        {
                            <p id="DoctorsCertificateButton">Det finns redan ett läkarintyg <button onclick="ReplaceFile(event, 'DoctorsCertificate', 'DoctorsCertificate')">Byt fil</button></p>
                        }
                    </div>
                </div>
                <div class="row row-height-14 line-height-07">
                    <div class="col col-md-offset-2 col-md-10">
                        @Html.ValidationMessageFor(model => model.DoctorsCertificate, "", new { @class = "text-danger font-size-11", id = "doctors-certificate-val" })
                    </div>
                </div>
                <div class="row row-height-14">
                </div>
            }

            <!--<div class="row row-height-14 row-top-margin align-bottom4">
                <div class="col col-md-2">

                </div>
                <div class="col col-md-10">
                    @Html.DisplayFor(modelItem => Model.RegAssistantSSNAndName)
                </div>
            </div>
            <div class="row row-height-26">
                <div class="col bold-14 padding-top-10 display-right-align col-md-2">
                    Sjukfrånvaroanmälan
                </div>
                <div class="col-md-10">
                    <input type="file" name="SickLeaveNotification" id="SickLeaveNotification" class="wide-input btn btn-default" />
                </div>
            </div>
            <div class="row row-height-14 line-height-07">
                <div class="col col-md-offset-2 col-md-10">
                    @*Html.ValidationMessageFor(model => model.SickLeaveNotification, "", new { @class = "text-danger font-size-11" })*@
                </div>
            </div>
            <div class="row row-height-14">
            </div>-->

            <div class="row row-height-14 row-top-margin align-bottom4">
                <div class="col col-md-2">

                </div>
                <div class="col col-md-10">
                    @Html.DisplayFor(modelItem => Model.RegAssistantSSNAndName)
                </div>
            </div>
            <div class="row row-height-26">
                <div class="col bold-14 label-align-top display-right-align col-md-2">
                    Tidsredovisning, ordinarie assistent
                </div>
                <div class="col-md-10" id="TimeReportDiv">
                    @if (!Model.TimeReportExists)
                    {
                        <input type="file" name="TimeReport" id="TimeReport" class="wide-input btn btn-default" onchange="checkErrors()" />
                    }
                    else
                    {
                        <p id="TimeReportButton">Det finns redan en tidsredovisning för den här assistenten <button onclick="ReplaceFile(event, 'TimeReport', 'TimeReport')">Byt fil</button></p>
                    }
                </div>
            </div>
            <div class="row row-height-14 line-height-07">
                <div class="col col-md-offset-2 col-md-10">
                    @Html.ValidationMessageFor(model => model.TimeReport, "", new { @class = "text-danger font-size-11", id = "timereport-regassistant-val" })
                </div>
            </div>
            <div class="row row-height-14">
            </div>
            <div style="display:none;" id="AssistantHasFileDiv"></div>

            @for (int i = 0; i < Model.NumberOfSubAssistants; i++)
            {
                <div class="row row-height-14 row-top-margin align-bottom4">
                    <div class="col col-md-2">

                    </div>
                    <div class="col col-md-10">
                        @Html.DisplayFor(modelItem => Model.SubAssistantSSNAndName[i])
                    </div>
                </div>
                <div class="row row-height-26">
                    @if (Model.NumberOfSubAssistants == 1)
                    {
                        <div class="col-md-2 bold-14-2">
                            Tidsredovisning, vikarierande assistent
                        </div>
                    }
                    else
                    {
                        <div class="col-md-2 bold-14-2">
                            Tidsredovisning, vikarierande assistent @(i + 1)
                        </div>
                    }
                    <div class="col col-md-10" id="TimeReportStandIn[@i]Div">
                        @if (!Model.TimeReportStandInExists[i])
                        {
                            <input type="file" name="TimeReportStandIn" id="TimeReportStandIn[@i]" class="timereportstandin wide-input btn btn-default" onchange="checkErrors()" />
                        }
                        else
                        {
                            <p id="TimeReportStandIn[@i]Button"><span class="timereportstandin"></span>Det finns redan en tidsredovisning för den här assistenten <button onclick="ReplaceFile(event, 'TimeReportStandIn[@i]', 'timereportstandin')">Byt fil</button></p>
                        }
                    </div>
                </div>
                <div class="row row-height-14 line-height-07">
                    <div class="col col-md-offset-2 col-md-10">
                        @Html.ValidationMessageFor(model => model.TimeReportStandIn[i], "", new { @class = "timereport-subassistant-val text-danger font-size-11" })
                    </div>
                </div>
                <div class="row row-height-14">
                </div>
            }

            <div class="row row-top-margin">
                <div class="small-padding-left3 col col-md-offset-2 col-md-1">
                    <input class="btn btn-primary btn-primary-small btn-left-margin-10" type="submit" name="submitButton" value="Skicka in" id="proceed" />
                </div>
                <div class="small-padding-left3 col col-md-1">
                    <input class="btn btn-secondary btn-secondary-small btn-left-margin-7" type="submit" name="submitButton" value="Spara" id="save" />
                </div>
                <div class="small-padding-left3 col col-md-1">
                    @Html.ActionLink("Avbryt", "IndexPageOmbud", null, new { @class = "btn btn-secondary btn-secondary-small btn-left-margin-4" })
                </div>
                <div class="small-padding-left3 col col-md-1">
                    @Html.ActionLink(Model.ClaimNumber, "_ShowClaim", new { refNumber = Model.ClaimNumber }, new { @class = "js-show-view-btn btn btn-secondary btn-secondary-small btn-left-margin-1" })
                </div>

                <div class="hidden-by-default" id="claimnumber">@Model.ClaimNumber</div>
                <div id='myModal' class='modal' style="text-align:left;">
                    <div class="modal-dialog" style="width:70%; height:400px; padding:10px;">
                        <div class="modal-content" style="overflow: auto; padding:10px; background-color:#fbf9ef;">
                            <button type="button" id="closbtn" float="right"> Stäng </button>
                            <div style="height:10px;">
                            </div>
                            <div id='myModalContent' style="width:1000px; height:400px; padding:10px;">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row row-validation-20 line-height-07">
                <div class="col col-md-offset-2 col-md-8 text-danger font-size-11 small-col-padding2" id="valerror-on-page">
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script type="text/javascript">
    $('#PdfEventCreate4').delay(10000).hide(0);
    $('#PdfEventCreate4Fail').delay(100000).hide(0);

    $(document).ready(function assignIdsToSubAssistants() {
        var form = document.getElementsByTagName("form");
        for (var i = 0; i < form.length; i++) {
            form[i].id = "form";
        }

        $("form").submit(function (e) {
            if (!checkValidationErrors()) {
                e.preventDefault();
                var erroronpage = document.getElementById('valerror-on-page');
                erroronpage.innerHTML = "Fel måste rättas först innan det går att spara eller skicka in ansökan.";
            }
            var idx = 0;
            var timereportsstandin = document.getElementsByClassName("timereportstandin");
            var assistantcount = document.getElementsByClassName("timereport-subassistant-val");
            var inputHidden = document.createElement('input');
            while (idx < assistantcount.length) {
                if (timereportsstandin != null && timereportsstandin[idx] != null && timereportsstandin[idx].value != "" && timereportsstandin[idx].value != null) {
                    inputHidden = document.createElement('input');
                    inputHidden.type = "hidden";
                    inputHidden.name = "AssistantHasFile";
                    inputHidden.id = "AssistantHasFile[" + idx + "]";
                    inputHidden.value = true;
                }
                else {
                    inputHidden = document.createElement('input');
                    inputHidden.type = "hidden";
                    inputHidden.name = "AssistantHasFile";
                    inputHidden.id = "AssistantHasFile[" + idx + "]";
                    inputHidden.value = false;
                }
                document.getElementById("AssistantHasFileDiv").appendChild(inputHidden)
                idx++;
            }
        });

        var doctorscertificateval = document.getElementById('doctors-certificate-val');
        var numberofsickdays = parseInt(document.getElementById('numberofsickdays').value);
        if (numberofsickdays > 7 && !@Json.Encode(Model.DoctorsCertificateExists) && document.getElementById("DoctorsCertificate").value == "") {
            doctorscertificateval.innerHTML = "Avsaknad av läkarintyg efter sjukdag 7 leder till reducerad ersättning.";
        }
    });

    function checkErrors() {
        var salaryspecregassistantval = document.getElementById('salaryspec-regassistant-val');
        var doctorscertificateval = document.getElementById('doctors-certificate-val');
        var timereportregassistantval = document.getElementById('timereport-regassistant-val');
        var timereportsubassistantval = document.getElementsByClassName('timereport-subassistant-val');

        if (document.getElementById("SalaryAttachment").value != "") {
            salaryspecregassistantval.innerHTML = "";
        }
        if (document.getElementById("TimeReport").value != "") {
            timereportregassistantval.innerHTML = "";
        }
        var numberofsickdays = parseInt(document.getElementById('numberofsickdays').value);
        if (numberofsickdays > 7 && document.getElementById("DoctorsCertificate").value != "") {
                doctorscertificateval.innerHTML = "";
        }
        var idx = 0;
        var timereportsstandin = document.getElementsByClassName("timereportstandin");
        while (idx < timereportsstandin.length) {
            if (timereportsstandin[idx].value != "") {
                timereportsubassistantval[idx].innerHTML = "";
            }
            idx++;
        }
    }

    function checkValidationErrors() {
        var validationErrorFound = false;

        var salaryspecregassistantval = document.getElementById('salaryspec-regassistant-val');
        var doctorscertificateval = document.getElementById('doctors-certificate-val');
        var timereportregassistantval = document.getElementById('timereport-regassistant-val');
        var timereportsubassistantval = document.getElementsByClassName('timereport-subassistant-val');

        if (!@Json.Encode(Model.SalaryAttachmentExists) && document.getElementById("SalaryAttachment").value == "") {
            salaryspecregassistantval.innerHTML = "Lönespecifikation för ordinarie assistent saknas.";
        }
        if (!@Json.Encode(Model.TimeReportExists) && document.getElementById("TimeReport").value == "") {
            timereportregassistantval.innerHTML = "Tidsredovisning för ordinarie assistent saknas.";
        }
        var numberofsickdays = parseInt(document.getElementById('numberofsickdays').value);

        @*if (numberofsickdays > 7 && !@Json.Encode(Model.DoctorsCertificateExists) && document.getElementById("DoctorsCertificate").value == "") {
            doctorscertificateval.innerHTML = "Läkarintyg saknas.";
        }*@
        var idx = 0;
        var timereportsstandin = document.getElementsByClassName("timereportstandin");
        var timereportexistsarray = @Html.Raw(Json.Encode(Model.TimeReportStandInExists));
        while (idx < timereportsstandin.length) {
            if (timereportexistsarray[idx] && timereportsstandin[idx].value == "") {
                timereportsubassistantval[idx].innerHTML = "Tidsredovisning för vikarierande assistent saknas.";
            }
            idx++;
        }

        if (!validationErrorFound) {
            if (salaryspecregassistantval.innerHTML != "" ||
                timereportregassistantval.innerHTML != "") {
                validationErrorFound = true;
            }
        }

        var idx = 0;
        while (!validationErrorFound && idx < timereportsubassistantval.length) {
            if (timereportsubassistantval[idx].innerHTML != "") {
                validationErrorFound = true;
            }
            idx++;
        }

        //if (!validationErrorFound) {
        //    //number of sickdays needs to be retrieved in order to figure out if doctors certificate shall be validated
        //    var numberofsickdays = parseInt(document.getElementById('numberofsickdays').value);
        //    if (numberofsickdays > 7) {
        //        if (doctorscertificateval.innerHTML != "") {
        //            validationErrorFound = true;
        //        }
        //    }
        //}

        if (!validationErrorFound) {
            return true;
        }
        else {
            return false;
        }
    }

    function ReplaceFile(e, f, n) {
        e.preventDefault();
        var inputFile = document.createElement('input');
        inputFile.type = "file";
        inputFile.name = n;
        inputFile.id = f;
        inputFile.className = n + " wide-input btn btn-default";
        inputFile.onchange = "checkErrors()";

        document.getElementById(f + 'Div').replaceChild(inputFile, document.getElementById(f + 'Button'))
    }

    $(function () {
        $(".js-show-view-btn").click(function (e) {
            e.preventDefault();
            var $buttonClicked = $(this);
            var options = {
                "backdrop": "static",
                keyboard: true
            };
            $.ajax({
                method: "GET",
                url: "/Claims/_ShowClaim",
                contentType: "application/json; charset=utf-8",
                datatype: "json",
                data: { refNumber: this.innerHTML },
                cache: false,
                success: function (data, textStatus, jqXHR) {
                    $("#myModalContent").html(data);
                    $("#myModal").modal(options);
                    $("#myModal").modal('show');
                }
            });
        })
        $("#closbtn").click(function () {
            $('#myModal').modal('hide');
        });
    });
</script>
