@model Sjuklöner.Viewmodels.ClaimAmountVM
@using Newtonsoft.Json

@{
    ViewBag.Title = "Amount";
}

<div class="row margin-breadcrumb">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Ansökningar", "Index", null, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Organisationsnummer", "Create", new { refNumber = Model.ClaimNumber, id = 1 }, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Arbetstid", "Create", new { refNumber = Model.ClaimNumber, id = 2 }, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item active breadcrumb-font breadcrumb-padding" aria-current="page">Belopp</li>
        </ol>
    </nav>
</div>

@*@using (Html.BeginForm("AddHours", "Claims", FormMethod.Get))*@
@using (Html.BeginForm("SaveAmounts", "Claims", FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.ClaimNumber)

    @*<body class="assistant-claim">*@
    <div class="row">
        <p class="col col-md-2"></p>
        <p class="page-header col col-md-10">Ansökan om sjuklöneersättning</p>
        @*<nl class="col col-md-offset-2 font-size-12">Vård- och omsorgsförvaltningen i Helsingborgs kommun</nl>*@
        <br>
        <p class="col col-md-offset-2 col-md-10 second-page-header2">Steg 3: Ange belopp och skicka in ansökan</p>
    </div>

    <div class="row">
        <div class="form-horizontal">

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.SickPay, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SickPay, new { htmlAttributes = new { @class = "form-control", @id = "sickpay", onchange = "calculateSum()", onblur = "calculateSum()" } })
                    @Html.ValidationMessageFor(model => model.SickPay, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HolidayPay, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.HolidayPay, new { htmlAttributes = new { @class = "form-control", @id = "holidaypay", onchange = "calculateSum()", onblur = "calculateSum()" } })
                    @Html.ValidationMessageFor(model => model.HolidayPay, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SocialFees, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SocialFees, new { htmlAttributes = new { @class = "form-control", @id = "socialfees", onchange = "calculateSum()", onblur = "calculateSum()" } })
                    @Html.ValidationMessageFor(model => model.SocialFees, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PensionAndInsurance, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PensionAndInsurance, new { htmlAttributes = new { @class = "form-control align-bottom2", @id = "pensionandinsurance", onchange = "calculateSum()", onblur = "calculateSum()" } })
                    @Html.ValidationMessageFor(model => model.PensionAndInsurance, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ClaimSum, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 align-bottom3" id="claimsum">
                    @Html.DisplayFor(model => Model.ClaimSum)
                    @*@Html.ValidationMessageFor(model => model.ClaimSum, "", new { @class = "text-danger" })*@
                </div>
            </div>



            @*@if (Model.Rejected)
                {
                    <div class="row">
                        <p class="col col-md-2"></p>
                        <p class="col col-md-10">@Model.RejectReason</p>
                    </div>
                }*@

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input class="btn btn-primary btn-primary-small" type="submit" value="Skicka in" id="assistance-claim-btn" />
                </div>
            </div>
            @*<div>
                    @Html.ActionLink("Spara", "SaveAmounts", "Claims", new { sickPay = parSickPay, parHolidayPay = Model.HolidayPay,
                                    parSocialFees = Model.SocialFees, parPensionAndInsurance = Model.PensionAndInsurance, parClaimSum = Model.ClaimSum,
                                    parClaimReference = Model.ReferenceNumber }, new { @class = "btn btn-default" })
                </div>*@

            <br>
            <br>
            <br>

        </div>
    </div>
    @*</body>*@
}

@*<div>
        @Html.ActionLink("Back to List", "Index")
    </div>*@

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@
<script type='text/javascript'>
    function calculateSum() {

        var data = @Html.Raw(JsonConvert.SerializeObject(this.Model));

        var sickPay = document.getElementById("sickpay");
        var holidayPay = document.getElementById("holidaypay");
        var socialFees = document.getElementById("socialfees");
        var pensionAndInsurance = document.getElementById("pensionandinsurance");
        var claimSum = document.getElementById("claimsum");

        claimSum.innerHTML = (parseFloat(sickPay.value) + parseFloat(holidayPay.value) + parseFloat(socialFees.value) + parseFloat(pensionAndInsurance.value)).toFixed(2);
    }
</script>