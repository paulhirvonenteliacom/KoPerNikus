@model Sjuklöner.Viewmodels.Create2VM
@using Newtonsoft.Json

@{
    ViewBag.Title = "Create2";
    int t = 0;
}
@*<body>*@

<div class="row margin-breadcrumb">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Ansökningar", "Index", null, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Personuppgifter och sjukperiod", "Create1", new { refNumber = Model.ReferenceNumber }, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item active breadcrumb-font breadcrumb-padding" aria-current="page">Timmar</li>
        </ol>
    </nav>
</div>
@using (Html.BeginForm("Create2", "Claims", new { refNumber = Model.ReferenceNumber }, FormMethod.Post))
{
    @Html.AntiForgeryToken()
    for (int i = 0; i < Model.ScheduleRowList.Count(); i++)
    {
        //Html.HiddenFor(modelItem => modelItem.ScheduleRowList[i].ScheduleRowDateString);
        @Html.HiddenFor(modelItem => modelItem.ScheduleRowList[i].ScheduleRowDate);
        @Html.HiddenFor(modelItem => modelItem.ScheduleRowList[i].DayDate);
        @Html.HiddenFor(modelItem => modelItem.ScheduleRowList[i].ScheduleRowWeekDay);
    }
    @Html.HiddenFor(modelItem => modelItem.ReferenceNumber)
    @Html.HiddenFor(modelItem => modelItem.NumberOfSubAssistants)

    <div class="row">
        <p class="col col-md-2"></p>
        <p class="page-header11 col col-md-10">Ansökan om sjuklöneersättning</p>
    </div>
    <div class="row">
        <p class="col-md-nopadding col col-md-2"></p>
        <p class="negative-left-margin4 second-page-header6 col-md-nopadding col col-md-10">Steg 2 av 4: Ange antal timmar</p>
    </div>

    <div class="row margin-bottom-medium">
        <p class="col-md-nopadding col col-md-2"></p>
        <p class="negative-left-margin5 col col-md-10">Antalet timmar ska anges i decimalformat (Exempel 1: 8,50 = 8 timmar och 30 minuter. Exempel 2: 8,25 = 8 timmar och 15 minuter.)</p>
    </div>

    <div class="row">
        <div class="form-horizontal">
            <div class="row">

                @Html.ValidationSummary(true, "", new { @class = "text-danger font-size-11" })

                @*REGULAR ASSISTANT*@
                <div class="row">
                    <div class="col col-md-2">
                    </div>
                    <div class="col col-md-10 assistant-heading2">
                        Ordinarie assistent, @Model.RegAssistantSSNAndName
                    </div>
                </div>

                <div class="row height-18-2">
                    <div class="col col-md-2 height-18-2">
                    </div>
                    <div class="col col-md-6 no-col-padding">
                        <div class="height-18-2">
                            Antal arbetstimmar (exkl. jourtimmar)
                        </div>
                    </div>
                    <div class="col col-md-3">
                        <div class="height-18-2">
                            Antal jourtimmar
                        </div>
                    </div>
                </div>

                <div class="row line-height-08 margin-bottom-small2">
                    <div class="col col-md-2">
                    </div>
                    <div class="col col-md-5 no-col-padding">
                        <div class="bottom-border">
                        </div>
                    </div>
                    <div class="col col-md-1">
                    </div>
                    <div class="col col-md-2">
                        <div class="bottom-border">
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col col-md-2">
                    </div>
                    <div class="col col-md-6 no-col-padding">
                        <div6 class="height-14 line-height-04">
                            <div class="col col-md-2 bold-14 col-md-nopadding">
                                Antal
                            </div>
                            <div class="col col-md-2 bold-14 col-md-nopadding">
                                varav
                            </div>
                            <div class="col col-md-2 bold-14 col-md-nopadding">
                                varav
                            </div>
                            <div class="col col-md-2 bold-14 col-md-nopadding">
                                varav
                            </div>
                            <div class="col col-md-2 bold-14 col-md-nopadding">
                                varav
                            </div>
                        </div6>
                    </div>
                    <div class="col col-md-3">
                        <div6 class="height-14 line-height-04">
                            <div class="col col-md-4 bold-14 col-md-nopadding">
                                Jour
                            </div>
                            <div class="col col-md-4 bold-14 col-padding-8">
                                Jour
                            </div>
                        </div6>
                    </div>
                </div>

                <div class="row line-height-08">
                    <div class="col col-md-2 no-col-padding">
                        <div class="date-left-padding">
                            <a class="btn btn-secondary btn-secondary-xsmall7" onclick="resetHours()">Nollställ</a>
                        </div>
                    </div>
                    <div class="col col-md-6 no-col-padding">
                        <div6 class="row height-14 line-height-04">
                            <div class="col col-md-2 bold-14 col-md-nopadding">
                                timmar
                            </div>
                            <div class="col col-md-2 bold-14 col-md-nopadding">
                                OB-kväll
                            </div>
                            <div class="col col-md-2 bold-14 col-md-nopadding">
                                OB-natt
                            </div>
                            <div class="col col-md-2 bold-14 col-md-nopadding">
                                OB-helg
                            </div>
                            <div class="col col-md-2 bold-14 col-md-nopadding">
                                OB-storhelg
                            </div>
                        </div6>
                    </div>
                    <div class="col col-md-3">
                        <div6 class="row height-14 line-height-04">
                            <div class="col col-md-4 bold-14 col-md-nopadding">
                                dag
                            </div>
                            <div class="col col-md-4 bold-14 col-padding-8">
                                kväll/helg
                            </div>
                        </div6>
                    </div>
                </div>

                @for (int i = 0; i < Model.ScheduleRowList.Count(); i++)
                {
                    <div class="row line-height-10">
                        <div class="schedule-date date-left-padding col col-md-2">
                            @Html.DisplayFor(modelItem => Model.ScheduleRowList[i].ScheduleRowDateString)
                            @Html.HiddenFor(modelItem => Model.ScheduleRowList[i].ScheduleRowDateString)
                        </div>
                        <div class="col col-md-6 no-col-padding">
                            <div class="row">
                                <div class="col col-md-2 col-padding-15">
                                    @Html.EditorFor(modelItem => Model.ScheduleRowList[i].Hours, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 hours", onchange = "validateInput('" + i + "', '" + 99 + "', '" + 1 + "')" } }) @*99 indicates to the javascript that it is the regular assistant *@
                                </div>
                                <div class="col col-md-2 col-padding-10 ">
                                    @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialEvening, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 unsocial-evening", onchange = "validateInput('" + i + "', '" + 99 + "', '" + 2 + "')" } })
                                </div>
                                <div class="col col-md-2 col-padding-5">
                                    @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialNight, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 unsocial-night", onchange = "validateInput('" + i + "', '" + 99 + "', '" + 3 + "')" } })
                                </div>
                                <div class="col col-md-2 col-md-nopadding">
                                    @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialWeekend, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 unsocial-weekend", onchange = "validateInput('" + i + "', '" + 99 + "', '" + 4 + "')" } })
                                </div>
                                <div class="col col-md-2 negative-left-margin2">
                                    @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialGrandWeekend, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 unsocial-grandweekend", onchange = "validateInput('" + i + "', '" + 99 + "', '" + 5 + "')" } })
                                </div>
                                <div class="col-md-nopadding col col-md-2">

                                </div>
                            </div>
                        </div>
                        <div class="col col-md-4">
                            <div class="row">
                                <div class="col col-md-3">
                                    @Html.EditorFor(modelItem => Model.ScheduleRowList[i].OnCallDay, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 oncall-day", onchange = "validateInput('" + i + "', '" + 99 + "', '" + 6 + "')" } })
                                </div>
                                <div class="col col-md-3 negative-left-margin6">
                                    @Html.EditorFor(modelItem => Model.ScheduleRowList[i].OnCallNight, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 oncall-night", onchange = "validateInput('" + i + "', '" + 99 + "', '" + 7 + "')" } })
                                </div>
                                <div class="schedule-date col-md-nopadding col col-md-4">
                                    @Html.DisplayFor(modelItem => Model.ScheduleRowList[i].ScheduleRowDateString)
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="date-left-padding col col-md-2">
                        </div>
                        <div class="col col-md-6 no-col-padding">
                            <div class="row row-height-30 small-row-margin4 line-height-07">
                                <div class="small-errormessage3 no-col-padding col col-md-2">
                                    @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].Hours, null, new { @class = "text-danger font-size-11 hours-val" })
                                </div>
                                <div class="small-errormessage3 no-col-padding col col-md-2">
                                    @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialEvening, null, new { @class = "text-danger font-size-11 unsocial-evening-val" })
                                </div>
                                <div class="small-errormessage3 no-col-padding col col-md-2">
                                    @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialNight, null, new { @class = "text-danger font-size-11 unsocial-night-val" })
                                </div>
                                <div class="small-errormessage3 no-col-padding col col-md-2">
                                    @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialWeekend, null, new { @class = "text-danger font-size-11 unsocial-weekend-val" })
                                </div>
                                <div class="small-errormessage3 no-col-padding col col-md-2">
                                    @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialGrandWeekend, null, new { @class = "text-danger font-size-11 unsocial-grandweekend-val" })
                                </div>
                                <div class="small-errormessage3 col-md-nopadding col col-md-2">
                                </div>
                            </div>
                        </div>
                        <div class="col col-md-3">
                            <div class="row row-height-30 small-row-margin4 line-height-07">
                                <div class="small-errormessage3 no-col-padding col col-md-4">
                                    @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].OnCallDay, "", new { @class = "text-danger font-size-11 oncall-day-val" })
                                </div>
                                <div class="small-errormessage3 col col-md-4 col-padding-6">
                                    @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].OnCallNight, "", new { @class = "text-danger font-size-11 oncall-night-val" })
                                </div>
                                <div class="small-errormessage3 col-md-nopadding col col-md-2">
                                </div>
                            </div>
                        </div>
                    </div>
                }

                @*Test*@
                @*@foreach (var item in Model.ScheduleRowList[0].Test)
                    {
                        <div class="row line-height-10">
                            <div class="schedule-date date-left-padding col col-md-2">
                            </div>
                            <div class="col col-md-6 no-col-padding">
                                <div class="row">
                                    <div class="col col-md-2 col-padding-15">
                                        @Html.EditorFor(modelItem => Model.ScheduleRowList[0].Test[t], new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2" } })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="date-left-padding col col-md-2">
                            </div>
                            <div class="col col-md-6 no-col-padding">
                                <div class="row row-height-30 small-row-margin4 line-height-07">
                                    <div class="small-errormessage3 no-col-padding col col-md-2">
                                        @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[0].Test[t], null, new { @class = "text-danger font-size-11" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        t++;
                    }*@
                <div class="row line-height-04">
                </div>

                @*SUBSTITUTE ASSISTANT*@
                @for (int k = 0; k < Model.NumberOfSubAssistants; k++)
                {
                    <div class="row">
                        <div class="col col-md-2">
                        </div>
                    </div>
                    <div class="row row-height-22 align-text-bottom">
                        <div class="col col-md-2 date-left-padding rest-val text-danger font-size-11 line-height-10">
                        </div>
                        @if (Model.NumberOfSubAssistants == 1)
                        {
                            <div class="col col-md-10 assistant-heading2">
                                Vikarierande assistent, @Model.SubAssistantSSNAndName[k]
                            </div>
                        }
                        else
                        {
                            <div class="col col-md-10 assistant-heading2">
                                Vikarierande assistent @(k + 1), @Model.SubAssistantSSNAndName[k]
                            </div>
                        }
                    </div>

                    <div class="row height-18-3">
                        <div class="col col-md-2 date-left-padding2 height-18-3">
                            <a class="btn btn-secondary btn-secondary-xsmall7" onclick="copyRestToStandin(@k)">+ Rest</a>
                        </div>
                        <div class="col col-md-6 no-col-padding">
                            <div class="height-18-2">
                                Antal arbetstimmar (exkl. jourtimmar)
                            </div>
                        </div>
                        <div class="col col-md-3">
                            <div class="height-18-2">
                                Antal jourtimmar
                            </div>
                        </div>
                    </div>

                    <div class="row line-height-08 margin-bottom-small3">
                        <div class="col col-md-2">
                        </div>
                        <div class="col col-md-5 no-col-padding">
                            <div class="bottom-border">
                            </div>
                        </div>
                        <div class="col col-md-1">
                        </div>
                        <div class="col col-md-2">
                            <div class="bottom-border">
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col col-md-2">
                        </div>
                        <div class="col col-md-6 no-col-padding">
                            <div6 class="height-14 line-height-04">
                                <div class="col col-md-2 bold-14 col-md-nopadding">
                                    Antal
                                </div>
                                <div class="col col-md-2 bold-14 col-md-nopadding">
                                    varav
                                </div>
                                <div class="col col-md-2 bold-14 col-md-nopadding">
                                    varav
                                </div>
                                <div class="col col-md-2 bold-14 col-md-nopadding">
                                    varav
                                </div>
                                <div class="col col-md-2 bold-14 col-md-nopadding">
                                    varav
                                </div>
                            </div6>
                        </div>
                        <div class="col col-md-3">
                            <div6 class="height-14 line-height-04">
                                <div class="col col-md-4 bold-14 col-md-nopadding">
                                    Jour
                                </div>
                                <div class="col col-md-4 bold-14 col-padding-8">
                                    Jour
                                </div>
                            </div6>
                        </div>
                    </div>

                    <div class="row line-height-08">
                        <div class="col col-md-2 no-col-padding">
                            <div class="date-left-padding">
                                <a class="btn btn-secondary btn-secondary-xsmall7" onclick="resetHoursSI(@k)">Nollställ</a>
                            </div>
                        </div>
                        <div class="col col-md-6 no-col-padding">
                            <div6 class="row height-14 line-height-04">
                                <div class="col col-md-2 bold-14 col-md-nopadding">
                                    timmar
                                </div>
                                <div class="col col-md-2 bold-14 col-md-nopadding">
                                    OB-kväll
                                </div>
                                <div class="col col-md-2 bold-14 col-md-nopadding">
                                    OB-natt
                                </div>
                                <div class="col col-md-2 bold-14 col-md-nopadding">
                                    OB-helg
                                </div>
                                <div class="col col-md-2 bold-14 col-md-nopadding">
                                    OB-storhelg
                                </div>
                            </div6>
                        </div>
                        <div class="col col-md-3">
                            <div6 class="row height-14 line-height-04">
                                <div class="col col-md-4 bold-14 col-md-nopadding">
                                    dag
                                </div>
                                <div class="col col-md-4 bold-14 col-padding-8">
                                    kväll/helg
                                </div>
                            </div6>
                        </div>
                    </div>

                    for (int i = 0; i < Model.ScheduleRowList.Count(); i++)
                    {
                        <div class="row line-height-10">
                            <div class="schedule-date date-left-padding col col-md-2">
                                @Html.DisplayFor(modelItem => Model.ScheduleRowList[i].ScheduleRowDateString)
                                @Html.HiddenFor(modelItem => Model.ScheduleRowList[i].ScheduleRowDateString)
                            </div>
                            <div class="col col-md-6 no-col-padding">
                                <div class="row">
                                    <div class="col col-md-2 col-padding-15">
                                        @Html.EditorFor(modelItem => Model.ScheduleRowList[i].HoursSI[k], new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 hours-si", onchange = "validateInput('" + i + "', '" + k + "', '" + 1 + "')" } })
                                    </div>
                                    <div class="col col-md-2 col-padding-10 ">
                                        @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialEveningSI[k], new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 unsocial-evening-si", onchange = "validateInput('" + i + "', '" + k + "', '" + 2 + "')" } })
                                    </div>
                                    <div class="col col-md-2 col-padding-5">
                                        @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialNightSI[k], new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 unsocial-night-si", onchange = "validateInput('" + i + "', '" + k + "', '" + 3 + "')" } })
                                    </div>
                                    <div class="col col-md-2 col-md-nopadding">
                                        @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialWeekendSI[k], new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 unsocial-weekend-si", onchange = "validateInput('" + i + "', '" + k + "', '" + 4 + "')" } })
                                    </div>
                                    <div class="col col-md-2 negative-left-margin2">
                                        @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialGrandWeekendSI[k], new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 unsocial-grandweekend-si", onchange = "validateInput('" + i + "', '" + k + "', '" + 5 + "')" } })
                                    </div>
                                    <div class="col-md-nopadding col col-md-2">
                                    </div>
                                </div>
                            </div>
                            <div class="col col-md-4">
                                <div class="row">
                                    <div class="col col-md-3">
                                        @Html.EditorFor(modelItem => Model.ScheduleRowList[i].OnCallDaySI[k], new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 oncall-day-si", onchange = "validateInput('" + i + "', '" + k + "', '" + 6 + "')" } })
                                    </div>
                                    <div class="col col-md-3 negative-left-margin6">
                                        @Html.EditorFor(modelItem => Model.ScheduleRowList[i].OnCallNightSI[k], new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 oncall-night-si", onchange = "validateInput('" + i + "', '" + k + "', '" + 7 + "')" } })
                                    </div>
                                    <div class="schedule-date col-md-nopadding col col-md-4">
                                        @Html.DisplayFor(modelItem => Model.ScheduleRowList[i].ScheduleRowDateString)
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="date-left-padding col col-md-2">
                            </div>
                            <div class="col col-md-6 no-col-padding">
                                <div class="row row-height-30 small-row-margin4 line-height-07">
                                    <div class="small-errormessage3 col col-md-2 no-col-padding">
                                        @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].HoursSI[k], null, new { @class = "text-danger font-size-11 hours-si-val" })
                                    </div>
                                    <div class="small-errormessage3 col col-md-2 no-col-padding">
                                        @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialEveningSI[k], null, new { @class = "text-danger font-size-11 unsocial-evening-si-val" })
                                    </div>
                                    <div class="small-errormessage3 col col-md-2 no-col-padding">
                                        @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialNightSI[k], null, new { @class = "text-danger font-size-11 unsocial-night-si-val" })
                                    </div>
                                    <div class="small-errormessage3 col col-md-2 no-col-padding">
                                        @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialWeekendSI[k], null, new { @class = "text-danger font-size-11 unsocial-weekend-si-val" })
                                    </div>
                                    <div class="small-errormessage3 col col-md-2 no-col-padding">
                                        @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialGrandWeekendSI[k], null, new { @class = "text-danger font-size-11 unsocial-grandweekend-si-val" })
                                    </div>
                                    <div class="small-errormessage3 col-md-nopadding col col-md-2">
                                    </div>
                                </div>
                            </div>
                            <div class="col col-md-3">
                                <div class="row row-height-30 small-row-margin4 line-height-07">
                                    <div class="small-errormessage3 col col-md-4 no-col-padding">
                                        @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].OnCallDaySI[k], "", new { @class = "text-danger font-size-11 oncall-day-si-val" })
                                    </div>
                                    <div class="small-errormessage3 col col-md-4 col-padding-6">
                                        @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].OnCallNightSI[k], "", new { @class = "text-danger font-size-11 oncall-night-si-val" })
                                    </div>
                                    <div class="small-errormessage3 col-md-nopadding col col-md-2">
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    if (k < Model.NumberOfSubAssistants - 1)
                    {
                        <div class="row line-height-04">
                        </div>
                    }
                }
            </div>

            <div class="row">
                <div class="col col-md-2">
                </div>
                <div class="negative-left-margin8 col col-md-1">
                    <input class="btn btn-primary btn-primary-small" type="submit" name="submitButton" value="Till steg 3" id="proceed" />
                </div>
                <div class="small-padding-left8 col col-md-1">
                    <input class="btn btn-secondary btn-secondary-small" type="submit" name="submitButton" value="Spara" id="save" />
                </div>
                <div class="small-padding-left6 col col-md-1">
                    @Html.ActionLink("Avbryt", "IndexPageOmbud", null, new { @class = "btn btn-secondary btn-secondary-small" })
                </div>
                <div class="small-padding-left5 col col-md-1">
                    @Html.ActionLink(Model.ReferenceNumber, "_ShowClaim", new { refNumber = Model.ReferenceNumber }, new { @class = "js-show-view-btn btn btn-secondary btn-secondary-small btn-left-margin-5" })
                </div>
                <div class="hidden-by-default" id="claimnumber">@Model.ReferenceNumber</div>
                <div id='myModal' class='modal' style="text-align:left;">
                    <div class="modal-dialog" style="width:70%; height:400px; padding:10px;">
                        <div class="modal-content" style="overflow: auto; padding:10px; background-color:#fbf9ef;">
                            <button type="button" id="closbtn" float="right"> Stäng </button>
                            <div style="height:10px;">
                            </div>
                            <div id='myModalContent' style="width:1000px; height:400px; padding:10px;">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@*</body>*@

<script type='text/javascript'>
    $(document).ready(function assignIdsToSubAssistants() {
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var unsocialEveningSI = document.getElementsByClassName("unsocial-evening-si");
        var unsocialNightSI = document.getElementsByClassName("unsocial-night-si");
        var unsocialWeekendSI = document.getElementsByClassName("unsocial-weekend-si");
        var unsocialGrandWeekendSI = document.getElementsByClassName("unsocial-grandweekend-si");
        var oncallDaySI = document.getElementsByClassName("oncall-day-si");
        var oncallNightSI = document.getElementsByClassName("oncall-night-si");

        for (var i = 0; i < numberOfHoursSI.length; i++) {
            numberOfHoursSI[i].id = 'hours-si' + i.toString();
            unsocialEveningSI[i].id = 'unsocial-evening-si' + i.toString();
            unsocialNightSI[i].id = 'unsocial-night-si' + i.toString();
            unsocialWeekendSI[i].id = 'unsocial-weekend-si' + i.toString();
            unsocialGrandWeekendSI[i].id = 'unsocial-grandweekend-si' + i.toString();
            oncallDaySI[i].id = 'oncall-day-si' + i.toString();
            oncallNightSI[i].id = 'oncall-night-si' + i.toString();
        }

    });


    //a new implementation is attempted. checkInput2 is now called by validateInput instead of checkInput.

    function validateInput(dayIdx, subIdx, typeOfHour) {
        var numberOfHours = document.getElementsByClassName("hours");
        var unsocialEvening = document.getElementsByClassName("unsocial-evening");
        var unsocialNight = document.getElementsByClassName("unsocial-night");
        var unsocialWeekend = document.getElementsByClassName("unsocial-weekend");
        var unsocialGrandWeekend = document.getElementsByClassName("unsocial-grandweekend");
        var oncallDay = document.getElementsByClassName("oncall-day");
        var oncallNight = document.getElementsByClassName("oncall-night");

        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var unsocialEveningSI = document.getElementsByClassName("unsocial-evening-si");
        var unsocialNightSI = document.getElementsByClassName("unsocial-night-si");
        var unsocialWeekendSI = document.getElementsByClassName("unsocial-weekend-si");
        var unsocialGrandWeekendSI = document.getElementsByClassName("unsocial-grandweekend-si");
        var oncallDaySI = document.getElementsByClassName("oncall-day-si");
        var oncallNightSI = document.getElementsByClassName("oncall-night-si");

        //calculate number of sickdays and number of substitute assistants
        var numberOfSickDays = numberOfHours.length;
        var numberOfSubAssistants = numberOfHoursSI.length / numberOfSickDays;

        //check if the change was for the regular assistant (identified by subIdx = 99)
        if (subIdx == 99) {
            if (typeOfHour == 1) {
                var hoursval = document.getElementsByClassName('hours-val');
                checkInput2(numberOfHours[dayIdx], hoursval[dayIdx], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 2) {
                var unsocialeveningval = document.getElementsByClassName('unsocial-evening-val');
                checkInput2(unsocialEvening[dayIdx], unsocialeveningval[dayIdx], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 3) {
                var unsocialnightval = document.getElementsByClassName('unsocial-night-val');
                checkInput2(unsocialNight[dayIdx], unsocialnightval[dayIdx], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 4) {
                var unsocialweekendval = document.getElementsByClassName('unsocial-weekend-val');
                checkInput2(unsocialWeekend[dayIdx], unsocialweekendval[dayIdx], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 5) {
                var unsocialgrandweekendval = document.getElementsByClassName('unsocial-grandweekend-val');
                checkInput2(unsocialGrandWeekend[dayIdx], unsocialgrandweekendval[dayIdx], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 6) {
                var oncalldayval = document.getElementsByClassName('oncall-day-val');
                checkInput2(oncallDay[dayIdx], oncalldayval[dayIdx], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 7) {
                var oncallnightval = document.getElementsByClassName('oncall-night-val');
                checkInput2(oncallNight[dayIdx], oncallnightval[dayIdx], typeOfHour, dayIdx, subIdx);
            }
        }
        else if (subIdx != 99) {
            if (typeOfHour == 1) {
                var hoursval = document.getElementsByClassName('hours-si-val');
                checkInput2(numberOfHoursSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)], hoursval[(subIdx * numberOfSickDays) + parseInt(dayIdx)], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 2) {
                var unsocialeveningval = document.getElementsByClassName('unsocial-evening-si-val');
                checkInput2(unsocialEveningSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)], unsocialeveningval[(subIdx * numberOfSickDays) + parseInt(dayIdx)], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 3) {
                var unsocialnightval = document.getElementsByClassName('unsocial-night-si-val');
                checkInput2(unsocialNightSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)], unsocialnightval[(subIdx * numberOfSickDays) + parseInt(dayIdx)], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 4) {
                var unsocialweekendval = document.getElementsByClassName('unsocial-weekend-si-val');
                checkInput2(unsocialWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)], unsocialweekendval[(subIdx * numberOfSickDays) + parseInt(dayIdx)], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 5) {
                var unsocialgrandweekendval = document.getElementsByClassName('unsocial-grandweekend-si-val');
                checkInput2(unsocialGrandWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)], unsocialgrandweekendval[(subIdx * numberOfSickDays) + parseInt(dayIdx)], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 6) {
                var oncalldayval = document.getElementsByClassName('oncall-day-si-val');
                checkInput2(oncallDaySI[(subIdx * numberOfSickDays) + parseInt(dayIdx)], oncalldayval[(subIdx * numberOfSickDays) + parseInt(dayIdx)], typeOfHour, dayIdx, subIdx);
            }
            else if (typeOfHour == 7) {
                var oncallnightval = document.getElementsByClassName('oncall-night-si-val');
                checkInput2(oncallNightSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)], oncallnightval[(subIdx * numberOfSickDays) + parseInt(dayIdx)], typeOfHour, dayIdx, subIdx);
            }
        }

        //check if there are any validation errors. If not the error "Fel måste rättas först." must be cleared.
        var hoursval = document.getElementsByClassName('hours-val');
        var unsocialeveningval = document.getElementsByClassName('unsocial-evening-val');
        var unsocialnightval = document.getElementsByClassName('unsocial-night-val');
        var unsocialweekendval = document.getElementsByClassName('unsocial-weekend-val');
        var unsocialgrandweekendval = document.getElementsByClassName('unsocial-grandweekend-val');
        var oncalldayval = document.getElementsByClassName('oncall-day-val');
        var oncallnightval = document.getElementsByClassName('oncall-night-val');

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
        var unsocialnightvalsi = document.getElementsByClassName('unsocial-night-si-val');
        var unsocialweekendvalsi = document.getElementsByClassName('unsocial-weekend-si-val');
        var unsocialgrandweekendvalsi = document.getElementsByClassName('unsocial-grandweekend-si-val');
        var oncalldayvalsi = document.getElementsByClassName('oncall-day-si-val');
        var oncallnightvalsi = document.getElementsByClassName('oncall-night-si-val');

        var restvalsi = document.getElementsByClassName('rest-val');

        var validationErrorFound = false;
        var pos = ((subIdx * numberOfSickDays) + parseInt(dayIdx) / numberOfSubAssistants);
        var dayIdx = 0;
        var subIdx = 0;

        //check for validation errors for regular assistant
        while (!validationErrorFound && dayIdx < numberOfSickDays) {
            if (hoursval[parseInt(dayIdx)].innerHTML != "" ||
                unsocialeveningval[parseInt(dayIdx)].innerHTML != "" ||
                unsocialnightval[parseInt(dayIdx)].innerHTML != "" ||
                unsocialweekendval[parseInt(dayIdx)].innerHTML != "" ||
                unsocialgrandweekendval[parseInt(dayIdx)].innerHTML != "" ||
                oncalldayval[parseInt(dayIdx)].innerHTML != "" ||
                oncallnightval[parseInt(dayIdx)].innerHTML != "") {
                validationErrorFound = true;
            }
            dayIdx++;
        }

        //check for validation errors for substitute assistants
        dayIdx = 0;
        while (!validationErrorFound && dayIdx < numberOfSickDays) {
            while (!validationErrorFound && subIdx < numberOfSubAssistants) {
                if (subIdx != pos) { //skip the hours for the substitute assistant to whom the remaining hours shall be written
                    if (hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "") {
                        validationErrorFound = true;
                    }
                }
                subIdx++;
            }
            dayIdx++;
            subIdx = 0;
        }

        //clear validation errors if any
        if (!validationErrorFound) {
            for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                restvalsi[subIdx].innerHTML = "";
            }
        }
    }

    function checkInput2(noOfHours, valInfo, hourType, dayIndex, subIndex) {
        //check if there is a point
        //check if there is a comma
        //check that string length is maximum 5
        //try parsing to float if no point and no comma and check that result is not greater than 25
        //if there is a comma check try parsing digits before the comma and check that the result is not greater than 25 and try parsing digits after comma and check that the result is not greater than 99.

        var amount = noOfHours.value;
        var amountInt = 0;
        var amountDec = 0;
        var failValidation = false;
        if (amount != "") {
            if (amount.length > 5) {
                valInfo.innerHTML = "Ogiltigt format eller värde.";
                failValidation = true;
            }
        }
        if (!failValidation && amount.search("\\.") != -1) { //contains a dot
            valInfo.innerHTML = "Ogiltigt format eller värde.";
            failValidation = true;
        }
        if (!failValidation) {
            pos = amount.search(",");
            if (pos != -1) { //contains a comma
                if (!pos == 0) { //comma is not in first position, check int part
                    amountInt = amount.substring(0, pos);
                    if (!isNaN(amountInt)) {
                        if (parseInt(amountInt) > 25 || parseInt(amountInt) < 0) {
                            valInfo.innerHTML = "Ogiltigt format eller värde.";
                            failValidation = true;
                        }
                    }
                    else {
                        valInfo.innerHTML = "Ogiltigt format eller värde.";
                        failValidation = true;
                    }
                }
                if (!failValidation) {
                    if (pos != amount.length - 1) { //comma is not in last position, check dec part
                        amountDec = amount.substring(pos + 1);
                        if (!isNaN(amountDec)) {
                            if (parseInt(amountDec) > 99 || parseInt(amountDec) < 0) {
                                valInfo.innerHTML = "Ogiltigt format eller värde.";
                                failValidation = true;
                            }
                        }
                        else {
                            valInfo.innerHTML = "Ogiltigt format eller värde.";
                            failValidation = true;
                        }
                    }
                }
            }
            else { //does not contain a comma
                if (isNaN(amount)) {
                    valInfo.innerHTML = "Ogiltigt format eller värde.";
                    failValidation = true;
                }
                else if (parseInt(amount) > 25 || parseInt(amount) < 0) {
                    valInfo.innerHTML = "Ogiltigt format eller värde.";
                    failValidation = true;
                }
            }
        }

        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;
        var numberOfSubAssistants = numberOfHoursSI.length / numberOfSickDays;

        //Check that there are no format errors for that dayIdx. If allowed, format errors would prevent a correct calculation of the "consumed" hours
        var unsocialEvening = document.getElementsByClassName("unsocial-evening");
        var unsocialNight = document.getElementsByClassName("unsocial-night");
        var unsocialWeekend = document.getElementsByClassName("unsocial-weekend");
        var unsocialGrandWeekend = document.getElementsByClassName("unsocial-grandweekend");
        var oncallDay = document.getElementsByClassName("oncall-day");
        var oncallNight = document.getElementsByClassName("oncall-night");

        var hoursval = document.getElementsByClassName('hours-val');
        var unsocialeveningval = document.getElementsByClassName('unsocial-evening-val');
        var unsocialnightval = document.getElementsByClassName('unsocial-night-val');
        var unsocialweekendval = document.getElementsByClassName('unsocial-weekend-val');
        var unsocialgrandweekendval = document.getElementsByClassName('unsocial-grandweekend-val');
        var oncalldayval = document.getElementsByClassName('oncall-day-val');
        var oncallnightval = document.getElementsByClassName('oncall-night-val');

        var unsocialEveningSI = document.getElementsByClassName("unsocial-evening-si");
        var unsocialNightSI = document.getElementsByClassName("unsocial-night-si");
        var unsocialWeekendSI = document.getElementsByClassName("unsocial-weekend-si");
        var unsocialGrandWeekendSI = document.getElementsByClassName("unsocial-grandweekend-si");
        var oncallDaySI = document.getElementsByClassName("oncall-day-si");
        var oncallNightSI = document.getElementsByClassName("oncall-night-si");

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
        var unsocialnightvalsi = document.getElementsByClassName('unsocial-night-si-val');
        var unsocialweekendvalsi = document.getElementsByClassName('unsocial-weekend-si-val');
        var unsocialgrandweekendvalsi = document.getElementsByClassName('unsocial-grandweekend-si-val');
        var oncalldayvalsi = document.getElementsByClassName('oncall-day-si-val');
        var oncallnightvalsi = document.getElementsByClassName('oncall-night-si-val');

        if (!failValidation) {
            var otherFault = false;
            var subIdx = 0;
            if (hourType == 1) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (hoursval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (hoursval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        hoursval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 2) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (unsocialeveningval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (unsocialeveningval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialeveningval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 3) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (unsocialnightval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (unsocialnightval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialnightval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 4) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (unsocialweekendval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (unsocialweekendval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialweekendval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 5) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (unsocialgrandweekendval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (unsocialgrandweekendval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialgrandweekendval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 6) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (oncalldayval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (oncalldayval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        oncalldayval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 7) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (oncallnightval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (oncallnightval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        oncallnightval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
        }

        //check if comparison between regular assistant's hours and substitute assistants' hours is possible.
        var subAndRegHourComparisonPossible = false;
        var calcUnsocialHoursPossible = false;
        var calcWorkAndOncallHoursPossible = false;
        var tooManySubHours = false;
        var tooManyUH = true; //short for tooManyUnsocialHours
        var UHcalculated = false; //Unsocial Hours has been calculated
        var tooManyHD = true; //short for tooManyHoursInTheDay (working hours including oncall hours)
        var HDcalculated = false; //Hours for the day has been calculated
        if (!failValidation) {
            subAndRegHourComparisonPossible = checkSubAndRegHours(hourType, dayIndex, subIndex);

            //check if substitutes' hours are greater than regular assistant's hours
            if (subAndRegHourComparisonPossible) {
                tooManySubHours = compareSubAndRegHours(amount, valInfo, hourType, dayIndex, subIndex);
            }

            if (tooManySubHours) {
                if (hourType == 1 || hourType == 2 || hourType == 3 || hourType == 4 || hourType == 5) {
                    //check if possible to calculate unsocial hours
                    calcUnsocialHoursPossible = checkUnsocialHours2(hourType, dayIndex, subIndex);
                    if (calcUnsocialHoursPossible) {
                        //calculate unsocial hours and check if the sum is greater than the number of working hours
                        tooManyUH = calcUnsocialHours(hourType, dayIndex, subIndex);
                        UHcalculated = true;
                    }
                    if (UHcalculated && !tooManyUH) {
                        //replace "För högt antal OB-timmar" with "" if not too many unsocial hours
                        clearUnsocialHoursValMsg(hourType, dayIndex, subIndex);
                    }
                }
                if (hourType == 1 || hourType == 6 || hourType == 7) {
                    //check if possible to calculate working hours including oncall hours for the day
                    calcWorkAndOncallHoursPossible = checkWorkAndOncallHours(hourType, dayIndex, subIndex);
                    if (calcWorkAndOncallHoursPossible) {
                        //calculate unsocial hours and check if the sum is greater than the number of working hours
                        tooManyHD = calcWorkAndOncallHours(hourType, dayIndex, subIndex);
                        HDcalculated = true;
                    }
                    if (HDcalculated && !tooManyHD) {
                        //replace "För högt antal timmar för dagen." with "" where relevant
                        updateWorkAndOncallHoursValMsg(hourType, dayIndex, subIndex, tooManyUH);
                    }
                }
                valInfo.innerHTML = "För högt antal vikarietimmar.";
            }
            else {
                //number of substitutes' hours is less or equal to the number of the regular assistant's hours
                if (hourType == 1 || hourType == 2 || hourType == 3 || hourType == 4 || hourType == 5) {
                    //check if possible to calculate unsocial hours
                    calcUnsocialHoursPossible = checkUnsocialHours2(hourType, dayIndex, subIndex);
                    if (calcUnsocialHoursPossible) {
                        //calculate unsocial hours and check if the sum is greater than the number of working hours
                        tooManyUH = calcUnsocialHours(hourType, dayIndex, subIndex);
                        UHcalculated = true;
                    }
                    if (UHcalculated && !tooManyUH) {
                        //replace "För högt antal OB-timmar" with "" if not too many unsocial hours for other hourTypes than the current for the current assistant
                        clearUnsocialHoursValMsg(hourType, dayIndex, subIndex);
                    }
                }
                if (hourType == 1 || hourType == 6 || hourType == 7) {
                    calcWorkAndOncallHoursPossible = checkWorkAndOncallHours(hourType, dayIndex, subIndex);
                    if (calcWorkAndOncallHoursPossible) {
                        //calculate unsocial hours and check if the sum is greater than the number of working hours
                        tooManyHD = calcWorkAndOncallHours(hourType, dayIndex, subIndex);
                        HDcalculated = true;
                    }
                    if (HDcalculated && !tooManyHD) {
                        //replace "För högt antal timmar för dagen." with "" where relevant for other hourTypes than the current for the current assistant
                        updateWorkAndOncallHoursValMsg(hourType, dayIndex, subIndex, tooManyUH);
                    }
                }
                if (hourType == 1 || hourType == 2 || hourType == 3 || hourType == 4 || hourType == 5) {
                    //assign validation info to current assistant and current hourType
                    if (UHcalculated && HDcalculated && !tooManyUH && !tooManyHD) {
                        valInfo.innerHTML = "";
                    }
                    else if (hourType == 1 && UHcalculated && HDcalculated && !tooManyUH && tooManyHD) {
                        valInfo.innerHTML = "För högt antal timmar för dagen.";
                    }
                    else if (UHcalculated && tooManyUH) {
                        valInfo.innerHTML = "För högt antal OB-timmar.";
                    }
                    else if (hourType == 1 && (valInfo.value == "" || valInfo.value == "För högt antal vikarietimmar.") && UHcalculated && HDcalculated && tooManyUH && tooManyHD) {
                        valInfo.innerHTML = "För högt antal timmar för dagen."
                    }
                }
                if (hourType == 6 || hourType == 7) {
                    //assign validation info to current assistant and current hourType
                    if (HDcalculated && !tooManyHD) {
                        valInfo.innerHTML = "";
                    }
                    else if (HDcalculated && tooManyHD) {
                        valInfo.innerHTML = "För högt antal timmar för dagen.";
                    }
                }
                //update validation info for the current hourType for all other assistants than the current
                var calcUnsocialHoursPossibleOtherAss = false;
                var calcWorkAndOncallHoursPossibleOtherAss = false;
                var tooManyUHOtherAss = true; //short for tooManyUnsocialHours
                var UHcalculatedOtherAss = false; //Unsocial Hours has been calculated
                var tooManyHDOtherAss = true; //short for tooManyHoursInTheDay (working hours including oncall hours)
                var HDcalculatedOtherAss = false; //Hours for the day has been calculated
                if (subIndex != 99) {
                    //this is the case if the current assistant is one of the substitute assistants, then the regular assistant's validation info must be updated
                    if (hourType == 1) {
                        if (hoursval[parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            //check if possible to calculate unsocial hours
                            calcUnsocialHoursPossibleOtherAss = checkUnsocialHours2(hourType, dayIndex, subIndex);
                            if (calcUnsocialHoursPossibleOtherAss) {
                                //calculate unsocial hours and check if the sum is greater than the number of working hours
                                tooManyUHOtherAss = calcUnsocialHours(hourType, dayIndex, subIndex);
                                UHcalculatedOtherAss = true;
                            }
                            //if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                            //    //replace "För högt antal OB-timmar" with "" if not too many unsocial hours
                            //    clearUnsocialHoursValMsg(hourType, dayIndex, subIndex);
                            //}
                            calcWorkAndOncallHoursPossibleOtherAss = checkWorkAndOncallHours(hourType, dayIndex, subIndex);
                            if (calcWorkAndOncallHoursPossibleOtherAss) {
                                //calculate work hours including oncall hours and check if the sum is greater than 25
                                tooManyHDOtherAss = calcWorkAndOncallHours(hourType, dayIndex, subIndex);
                                HDcalculatedOtherAss = true;
                            }
                            //if (HDcalculatedOtherAss && !tooManyHDOtherAss) {
                            //    //replace "För högt antal timmar för dagen." with "" where relevant for other hourTypes than the current for the assistant
                            //    updateWorkAndOncallHoursValMsg(hourType, dayIndex, subIndex, tooManyUHOtherAss);
                            //}
                            if (HDcalculatedOtherAss && tooManyHDOtherAss) {
                                hoursval[parseInt(dayIndex)].innerHTML = "För högt antal timmar för dagen.";
                            }
                            else {
                                if (UHcalculatedOtherAss && tooManyUHOtherAss) {
                                    hoursval[parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar."
                                }
                                else if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                                    hoursval[parseInt(dayIndex)].innerHTML = "";
                                }
                            }
                        }
                    }
                    else if (hourType == 2) {
                        if (unsocialeveningval[parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            //check if possible to calculate unsocial hours
                            calcUnsocialHoursPossibleOtherAss = checkUnsocialHours2(hourType, dayIndex, subIndex);
                            if (calcUnsocialHoursPossibleOtherAss) {
                                //calculate unsocial hours and check if the sum is greater than the number of working hours
                                tooManyUHOtherAss = calcUnsocialHours(hourType, dayIndex, subIndex);
                                UHcalculatedOtherAss = true;
                            }
                            if (UHcalculatedOtherAss && tooManyUHOtherAss) {
                                unsocialeveningval[parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar."
                            }
                            else if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                                unsocialeveningval[parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                    else if (hourType == 3) {
                        if (unsocialnightval[parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            //check if possible to calculate unsocial hours
                            calcUnsocialHoursPossibleOtherAss = checkUnsocialHours2(hourType, dayIndex, subIndex);
                            if (calcUnsocialHoursPossibleOtherAss) {
                                //calculate unsocial hours and check if the sum is greater than the number of working hours
                                tooManyUHOtherAss = calcUnsocialHours(hourType, dayIndex, subIndex);
                                UHcalculatedOtherAss = true;
                            }
                            if (UHcalculatedOtherAss && tooManyUHOtherAss) {
                                unsocialnightval[parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar."
                            }
                            else if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                                unsocialnightval[parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                    else if (hourType == 4) {
                        if (unsocialweekendval[parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            //check if possible to calculate unsocial hours
                            calcUnsocialHoursPossibleOtherAss = checkUnsocialHours2(hourType, dayIndex, subIndex);
                            if (calcUnsocialHoursPossibleOtherAss) {
                                //calculate unsocial hours and check if the sum is greater than the number of working hours
                                tooManyUHOtherAss = calcUnsocialHours(hourType, dayIndex, subIndex);
                                UHcalculatedOtherAss = true;
                            }
                            if (UHcalculatedOtherAss && tooManyUHOtherAss) {
                                unsocialweekendval[parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar."
                            }
                            else if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                                unsocialweekendval[parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                    else if (hourType == 5) {
                        if (unsocialgrandweekendval[parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            //check if possible to calculate unsocial hours
                            calcUnsocialHoursPossibleOtherAss = checkUnsocialHours2(hourType, dayIndex, subIndex);
                            if (calcUnsocialHoursPossibleOtherAss) {
                                //calculate unsocial hours and check if the sum is greater than the number of working hours
                                tooManyUHOtherAss = calcUnsocialHours(hourType, dayIndex, subIndex);
                                UHcalculatedOtherAss = true;
                            }
                            if (UHcalculatedOtherAss && tooManyUHOtherAss) {
                                unsocialgrandweekendval[parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar."
                            }
                            else if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                                unsocialgrandweekendval[parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                    else if (hourType == 6) {
                        if (oncalldayval[parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            calcWorkAndOncallHoursPossibleOtherAss = checkWorkAndOncallHours(hourType, dayIndex, subIndex);
                            if (calcWorkAndOncallHoursPossibleOtherAss) {
                                //calculate work hours including oncall hours and check if the sum is greater than 25
                                tooManyHDOtherAss = calcWorkAndOncallHours(hourType, dayIndex, subIndex);
                                HDcalculatedOtherAss = true;
                            }
                            if (HDcalculatedOtherAss && tooManyHDOtherAss) {
                                oncalldayval[parseInt(dayIndex)].innerHTML = "För högt antal timmar för dagen."
                            }
                            else if (HDcalculatedOtherAss && !tooManyHDOtherAss) {
                                oncalldayval[parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                    else if (hourType == 7) {
                        if (oncallnightval[parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            calcWorkAndOncallHoursPossibleOtherAss = checkWorkAndOncallHours(hourType, dayIndex, subIndex);
                            if (calcWorkAndOncallHoursPossibleOtherAss) {
                                //calculate work hours including oncall hours and check if the sum is greater than 25
                                tooManyHDOtherAss = calcWorkAndOncallHours(hourType, dayIndex, subIndex);
                                HDcalculatedOtherAss = true;
                            }
                            if (HDcalculatedOtherAss && tooManyHDOtherAss) {
                                oncallnightval[parseInt(dayIndex)].innerHTML = "För högt antal timmar för dagen."
                            }
                            else if (HDcalculatedOtherAss && !tooManyHDOtherAss) {
                                oncallnightval[parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                }
                //update the substitute assistants' validation info (except for the current assistant)
                calcUnsocialHoursPossibleOtherAss = false;
                calcWorkAndOncallHoursPossibleOtherAss = false;
                tooManyUHOtherAss = true; //short for tooManyUnsocialHours
                UHcalculatedOtherAss = false; //Unsocial Hours has been calculated
                tooManyHDOtherAss = true; //short for tooManyHoursInTheDay (working hours including oncall hours)
                HDcalculatedOtherAss = false; //Hours for the day has been calculated
                if (hourType == 1) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            //check if possible to calculate unsocial hours
                            calcUnsocialHoursPossibleOtherAss = checkUnsocialHours2(hourType, dayIndex, subIdx);
                            if (calcUnsocialHoursPossibleOtherAss) {
                                //calculate unsocial hours and check if the sum is greater than the number of working hours
                                tooManyUHOtherAss = calcUnsocialHours(hourType, dayIndex, subIdx);
                                UHcalculatedOtherAss = true;
                            }
                            //if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                            //    //replace "För högt antal OB-timmar" with "" if not too many unsocial hours
                            //    clearUnsocialHoursValMsg(hourType, dayIndex, subIndex);
                            //}
                            calcWorkAndOncallHoursPossibleOtherAss = checkWorkAndOncallHours(hourType, dayIndex, subIdx);
                            if (calcWorkAndOncallHoursPossibleOtherAss) {
                                //calculate work hours including oncall hours and check if the sum is greater than 25
                                tooManyHDOtherAss = calcWorkAndOncallHours(hourType, dayIndex, subIdx);
                                HDcalculatedOtherAss = true;
                            }
                            //if (HDcalculatedOtherAss && !tooManyHDOtherAss) {
                            //    //replace "För högt antal timmar för dagen." with "" where relevant for other hourTypes than the current for the assistant
                            //    updateWorkAndOncallHoursValMsg(hourType, dayIndex, subIndex, tooManyUHOtherAss);
                            //}
                            if (HDcalculatedOtherAss && tooManyHDOtherAss) {
                                hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal timmar för dagen.";
                            }
                            else {
                                if (UHcalculatedOtherAss && tooManyUHOtherAss) {
                                    hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar."
                                }
                                else if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                                    hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                                }
                            }
                        }
                    }
                }
                else if (hourType == 2) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            //check if possible to calculate unsocial hours
                            calcUnsocialHoursPossibleOtherAss = checkUnsocialHours2(hourType, dayIndex, subIdx);
                            if (calcUnsocialHoursPossibleOtherAss) {
                                //calculate unsocial hours and check if the sum is greater than the number of working hours
                                tooManyUHOtherAss = calcUnsocialHours(hourType, dayIndex, subIdx);
                                UHcalculatedOtherAss = true;
                            }
                            if (UHcalculatedOtherAss && tooManyUHOtherAss) {
                                unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar."
                            }
                            else if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                                unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                }
                else if (hourType == 3) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            //check if possible to calculate unsocial hours
                            calcUnsocialHoursPossibleOtherAss = checkUnsocialHours2(hourType, dayIndex, subIdx);
                            if (calcUnsocialHoursPossibleOtherAss) {
                                //calculate unsocial hours and check if the sum is greater than the number of working hours
                                tooManyUHOtherAss = calcUnsocialHours(hourType, dayIndex, subIdx);
                                UHcalculatedOtherAss = true;
                            }
                            if (UHcalculatedOtherAss && tooManyUHOtherAss) {
                                unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar."
                            }
                            else if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                                unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                }
                else if (hourType == 4) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            //check if possible to calculate unsocial hours
                            calcUnsocialHoursPossibleOtherAss = checkUnsocialHours2(hourType, dayIndex, subIdx);
                            if (calcUnsocialHoursPossibleOtherAss) {
                                //calculate unsocial hours and check if the sum is greater than the number of working hours
                                tooManyUHOtherAss = calcUnsocialHours(hourType, dayIndex, subIdx);
                                UHcalculatedOtherAss = true;
                            }
                            if (UHcalculatedOtherAss && tooManyUHOtherAss) {
                                unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar."
                            }
                            else if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                                unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                }
                else if (hourType == 5) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            //check if possible to calculate unsocial hours
                            calcUnsocialHoursPossibleOtherAss = checkUnsocialHours2(hourType, dayIndex, subIdx);
                            if (calcUnsocialHoursPossibleOtherAss) {
                                //calculate unsocial hours and check if the sum is greater than the number of working hours
                                tooManyUHOtherAss = calcUnsocialHours(hourType, dayIndex, subIdx);
                                UHcalculatedOtherAss = true;
                            }
                            if (UHcalculatedOtherAss && tooManyUHOtherAss) {
                                unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar."
                            }
                            else if (UHcalculatedOtherAss && !tooManyUHOtherAss) {
                                unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                }
                else if (hourType == 6) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            calcWorkAndOncallHoursPossibleOtherAss = checkWorkAndOncallHours(hourType, dayIndex, subIdx);
                            if (calcWorkAndOncallHoursPossibleOtherAss) {
                                //calculate work hours including oncall hours and check if the sum is greater than 25
                                tooManyHDOtherAss = calcWorkAndOncallHours(hourType, dayIndex, subIdx);
                                HDcalculatedOtherAss = true;
                            }
                            if (HDcalculatedOtherAss && tooManyHDOtherAss) {
                                oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal timmar för dagen."
                            }
                            else if (HDcalculatedOtherAss && !tooManyHDOtherAss) {
                                oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                }
                else if (hourType == 7) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal vikarietimmar.") {
                            calcWorkAndOncallHoursPossibleOtherAss = checkWorkAndOncallHours(hourType, dayIndex, subIdx);
                            if (calcWorkAndOncallHoursPossibleOtherAss) {
                                //calculate work hours including oncall hours and check if the sum is greater than 25
                                tooManyHDOtherAss = calcWorkAndOncallHours(hourType, dayIndex, subIdx);
                                HDcalculatedOtherAss = true;
                            }
                            if (HDcalculatedOtherAss && tooManyHDOtherAss) {
                                oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal timmar för dagen."
                            }
                            else if (HDcalculatedOtherAss && !tooManyHDOtherAss) {
                                oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            }
                        }
                    }
                }
            }
        }
    }

    function updateWorkAndOncallHoursValMsg(hourType, dayIndex, subIndex, tooManyUH) {

        var hoursval = document.getElementsByClassName('hours-val');
        var oncalldayval = document.getElementsByClassName('oncall-day-val');
        var oncallnightval = document.getElementsByClassName('oncall-night-val');

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var oncalldayvalsi = document.getElementsByClassName('oncall-day-si-val');
        var oncallnightvalsi = document.getElementsByClassName('oncall-night-si-val');

        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;

        if (subIndex != 99) {
            if (hourType != 1 && hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                if (!tooManyUH) {
                    hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                }
                else {
                    hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar.";
                }
            }

            if (hourType != 6 && oncalldayvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                oncalldayvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
            }

            if (hourType != 7 && oncallnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                oncallnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
            }
        }
        else if (subIndex == 99) {
            if (hourType != 1 && hoursval[parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                if (!tooManyUH) {
                    hoursval[parseInt(dayIndex)].innerHTML = "";
                }
                else {
                    hoursval[parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar.";
                }
            }

            if (hourType != 6 && oncalldayval[parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                oncalldayval[parseInt(dayIndex)].innerHTML = "";
            }

            if (hourType != 7 && oncallnightval[parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                oncallnightval[parseInt(dayIndex)].innerHTML = "";
            }
        }
    }

    function calcWorkAndOncallHours(hourType, dayIndex, subIndex) {

        var oncallDay = document.getElementsByClassName("oncall-day");
        var oncallNight = document.getElementsByClassName("oncall-night");

        var oncallDaySI = document.getElementsByClassName("oncall-day-si");
        var oncallNightSI = document.getElementsByClassName("oncall-night-si");

        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;

        var sumWorkAndOncallHours = 0;
        var tooManyHours = false;
        if (subIndex != 99) {
            if (oncallDaySI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                sumWorkAndOncallHours += parseFloat(oncallDaySI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (oncallNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                sumWorkAndOncallHours += parseFloat(oncallNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                sumWorkAndOncallHours += parseFloat(numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (sumWorkAndOncallHours > 25) {
                return true;
            }
            else {
                return false;
            }
        }
        else if (subIndex == 99) {
            if (oncallDay[parseInt(dayIndex)].value != "") {
                sumWorkAndOncallHours += parseFloat(oncallDay[parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (oncallNight[parseInt(dayIndex)].value != "") {
                sumWorkAndOncallHours += parseFloat(oncallNight[parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (numberOfHours[parseInt(dayIndex)].value != "") {
                sumWorkAndOncallHours += parseFloat(numberOfHours[parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (sumWorkAndOncallHours > 25) {
                return true;
            }
            else {
                return false;
            }
        }
    }

    function checkWorkAndOncallHours(hourType, dayIndex, subIndex) {

        var hoursval = document.getElementsByClassName('hours-val');
        var oncalldayval = document.getElementsByClassName('oncall-day-val');
        var oncallnightval = document.getElementsByClassName('oncall-night-val');

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var oncalldayvalsi = document.getElementsByClassName('oncall-day-si-val');
        var oncallnightvalsi = document.getElementsByClassName('oncall-night-si-val');

        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;

        if (subIndex != 99) {
            if (hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde." &&
                oncalldayvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde." &&
                oncallnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                return true;
            }
        }
        else if (subIndex == 99) {
            if (hoursval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde." &&
                oncalldayval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde." &&
                oncallnightval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                return true;
            }
        }
        else {
            return false;
        }
    }

    function clearUnsocialHoursValMsg(hourType, dayIndex, subIndex) {

        var hoursval = document.getElementsByClassName('hours-val');
        var unsocialeveningval = document.getElementsByClassName('unsocial-evening-val');
        var unsocialnightval = document.getElementsByClassName('unsocial-night-val');
        var unsocialweekendval = document.getElementsByClassName('unsocial-weekend-val');
        var unsocialgrandweekendval = document.getElementsByClassName('unsocial-grandweekend-val');

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
        var unsocialnightvalsi = document.getElementsByClassName('unsocial-night-si-val');
        var unsocialweekendvalsi = document.getElementsByClassName('unsocial-weekend-si-val');
        var unsocialgrandweekendvalsi = document.getElementsByClassName('unsocial-grandweekend-si-val');

        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;

        if (subIndex != 99) {
            if (hourType != 1 && hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
            }

            if (hourType != 2 && unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
            }

            if (hourType != 3 && unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
            }

            if (hourType != 4 && unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
            }

            if (hourType != 5 && unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
            }
        }
        else if (subIndex == 99) {
            if (hourType != 1 && hoursval[parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                hoursval[parseInt(dayIndex)].innerHTML = "";
            }

            if (hourType != 2 && unsocialeveningval[parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                unsocialeveningval[parseInt(dayIndex)].innerHTML = "";
            }

            if (hourType != 3 && unsocialnightval[parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                unsocialnightval[parseInt(dayIndex)].innerHTML = "";
            }

            if (hourType != 4 && unsocialweekendval[parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                unsocialweekendval[parseInt(dayIndex)].innerHTML = "";
            }

            if (hourType != 5 && unsocialgrandweekendval[parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                unsocialgrandweekendval[parseInt(dayIndex)].innerHTML = "";
            }
        }
    }

    function calcUnsocialHours(hourType, dayIndex, subIndex) {

        var unsocialEvening = document.getElementsByClassName("unsocial-evening");
        var unsocialNight = document.getElementsByClassName("unsocial-night");
        var unsocialWeekend = document.getElementsByClassName("unsocial-weekend");
        var unsocialGrandWeekend = document.getElementsByClassName("unsocial-grandweekend");

        var unsocialEveningSI = document.getElementsByClassName("unsocial-evening-si");
        var unsocialNightSI = document.getElementsByClassName("unsocial-night-si");
        var unsocialWeekendSI = document.getElementsByClassName("unsocial-weekend-si");
        var unsocialGrandWeekendSI = document.getElementsByClassName("unsocial-grandweekend-si");

        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;

        var sumUnsocialHours = 0;
        var tooManyHours = false;
        if (subIndex != 99) {
            if (unsocialEveningSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                sumUnsocialHours += parseFloat(unsocialEveningSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (unsocialNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                sumUnsocialHours += parseFloat(unsocialNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (unsocialWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                sumUnsocialHours += parseFloat(unsocialWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (unsocialGrandWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                sumUnsocialHours += parseFloat(unsocialGrandWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
            }

            if ((sumUnsocialHours > 0 && numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value == "") || (sumUnsocialHours > parseFloat(numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.')))) {
                return true;
            }
            else {
                return false;
            }
        }
        else if (subIndex == 99) {
            if (unsocialEvening[parseInt(dayIndex)].value != "") {
                sumUnsocialHours += parseFloat(unsocialEvening[parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (unsocialNight[parseInt(dayIndex)].value != "") {
                sumUnsocialHours += parseFloat(unsocialNight[parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (unsocialWeekend[parseInt(dayIndex)].value != "") {
                sumUnsocialHours += parseFloat(unsocialWeekend[parseInt(dayIndex)].value.replace(',', '.'));
            }
            if (unsocialGrandWeekend[parseInt(dayIndex)].value != "") {
                sumUnsocialHours += parseFloat(unsocialGrandWeekend[parseInt(dayIndex)].value.replace(',', '.'));
            }

            if ((sumUnsocialHours > 0 && numberOfHours[parseInt(dayIndex)].value == "") || (sumUnsocialHours > parseFloat(numberOfHours[parseInt(dayIndex)].value.replace(',', '.')))) {
                return true;
            }
            else {
                return false;
            }
        }
    }

    function checkUnsocialHours2(hourType, dayIndex, subIndex) {
        var hoursval = document.getElementsByClassName('hours-val');
        var unsocialeveningval = document.getElementsByClassName('unsocial-evening-val');
        var unsocialnightval = document.getElementsByClassName('unsocial-night-val');
        var unsocialweekendval = document.getElementsByClassName('unsocial-weekend-val');
        var unsocialgrandweekendval = document.getElementsByClassName('unsocial-grandweekend-val');

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
        var unsocialnightvalsi = document.getElementsByClassName('unsocial-night-si-val');
        var unsocialweekendvalsi = document.getElementsByClassName('unsocial-weekend-si-val');
        var unsocialgrandweekendvalsi = document.getElementsByClassName('unsocial-grandweekend-si-val');

        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;

        if (subIndex != 99) {
            if (unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde." &&
                unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde." &&
                unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde." &&
                unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                return true;
            }
            else {
                return false;
            }
        }
        else if (subIndex == 99) {
            if (unsocialeveningval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde." &&
                unsocialnightval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde." &&
                unsocialweekendval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde." &&
                unsocialgrandweekendval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                return true;
            }
            else {
                return false;
            }
        }
    }

    function compareSubAndRegHours(amount, valInfo, hourType, dayIndex, subIndex) {
        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;
        var numberOfSubAssistants = numberOfHoursSI.length / numberOfSickDays;

        var failValidation = false;
        var sumSIHours = 0;
        if (hourType == 1) {
            if (subIndex != 99) {
                if (amount != "" && parseFloat(amount) > 0 && amount != "0,00" && numberOfHours[dayIndex].value == "") {
                    //valInfo.innerHTML = "Ordinarie assistent måste fyllas i först."; This line is needed instead of the next line if it is necessary to distinguish between
                    //too high sub hours in general and the special case when no hours has yet been filled in for the regular assistant
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
            if (!failValidation) {
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (numberOfHoursSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                        sumSIHours += parseFloat(numberOfHoursSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                    }
                }
                if (sumSIHours > 0 && sumSIHours > parseFloat(numberOfHours[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
        }
        else if (hourType == 2) {
            var unsocialEvening = document.getElementsByClassName("unsocial-evening");
            if (subIndex != 99) {
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && unsocialEvening[dayIndex].value == "") {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
            if (!failValidation) {
                var unsocialEveningSI = document.getElementsByClassName("unsocial-evening-si");
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (unsocialEveningSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                        sumSIHours += parseFloat(unsocialEveningSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                    }
                }
                if (sumSIHours > 0 && sumSIHours > parseFloat(unsocialEvening[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
        }
        else if (hourType == 3) {
            var unsocialNight = document.getElementsByClassName("unsocial-night");
            if (subIndex != 99) {
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && unsocialNight[dayIndex].value == "") {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
            if (!failValidation) {
                var unsocialNightSI = document.getElementsByClassName("unsocial-night-si");
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (unsocialNightSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                        sumSIHours += parseFloat(unsocialNightSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                    }
                }
                if (sumSIHours > 0 && sumSIHours > parseFloat(unsocialNight[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
        }
        else if (hourType == 4) {
            var unsocialWeekend = document.getElementsByClassName("unsocial-weekend");
            if (subIndex != 99) {
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && unsocialWeekend[dayIndex].value == "") {
                    valInfo.innerHTML = "Ordinarie assistent måste fyllas i först.";
                    failValidation = true;
                }
            }
            if (!failValidation) {
                var unsocialWeekendSI = document.getElementsByClassName("unsocial-weekend-si");
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (unsocialWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                        sumSIHours += parseFloat(unsocialWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                    }
                }
                if (!failValidation && sumSIHours > 0 && sumSIHours > parseFloat(unsocialWeekend[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
        }
        else if (hourType == 5) {
            var unsocialGrandWeekend = document.getElementsByClassName("unsocial-grandweekend");
            if (subIndex != 99) {
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && unsocialGrandWeekend[dayIndex].value == "") {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
            if (!failValidation) {
                var unsocialGrandWeekendSI = document.getElementsByClassName("unsocial-grandweekend-si");
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (unsocialGrandWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                        sumSIHours += parseFloat(unsocialGrandWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                    }
                }
                if (sumSIHours > 0 && sumSIHours > parseFloat(unsocialGrandWeekend[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
        }
        else if (hourType == 6) {
            var oncallDay = document.getElementsByClassName("oncall-day");
            if (subIndex != 99) {
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && oncallDay[dayIndex].value == "") {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
            if (!failValidation) {
                var oncallDaySI = document.getElementsByClassName("oncall-day-si");
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (oncallDaySI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                        sumSIHours += parseFloat(oncallDaySI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                    }
                }
                if (sumSIHours > 0 && sumSIHours > parseFloat(oncallDay[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
        }
        else if (hourType == 7) {
            var oncallNight = document.getElementsByClassName("oncall-night");
            if (subIndex != 99) {
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && oncallNight[dayIndex].value == "") {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
            if (!failValidation) {
                var oncallNightSI = document.getElementsByClassName("oncall-night-si");
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (oncallNightSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                        sumSIHours += parseFloat(oncallNightSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                    }
                }
                if (!failValidation && sumSIHours > 0 && sumSIHours > parseFloat(oncallNight[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
            }
        }

        if (failValidation) {
            return true;
        }
        else {
            return false;
        }
    }

    function checkSubAndRegHours(hourType, dayIndex, subIndex) {
        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;
        var numberOfSubAssistants = numberOfHoursSI.length / numberOfSickDays;

        var hoursval = document.getElementsByClassName('hours-val');
        var unsocialeveningval = document.getElementsByClassName('unsocial-evening-val');
        var unsocialnightval = document.getElementsByClassName('unsocial-night-val');
        var unsocialweekendval = document.getElementsByClassName('unsocial-weekend-val');
        var unsocialgrandweekendval = document.getElementsByClassName('unsocial-grandweekend-val');
        var oncalldayval = document.getElementsByClassName('oncall-day-val');
        var oncallnightval = document.getElementsByClassName('oncall-night-val');

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
        var unsocialnightvalsi = document.getElementsByClassName('unsocial-night-si-val');
        var unsocialweekendvalsi = document.getElementsByClassName('unsocial-weekend-si-val');
        var unsocialgrandweekendvalsi = document.getElementsByClassName('unsocial-grandweekend-si-val');
        var oncalldayvalsi = document.getElementsByClassName('oncall-day-si-val');
        var oncallnightvalsi = document.getElementsByClassName('oncall-night-si-val');

        var otherFault = false;
        var failValidation = false;
        var subIdx = 0;
        if (hourType == 1) {
            while (!otherFault && subIdx < numberOfSubAssistants) {
                if (subIdx != subIndex &&
                    hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
                subIdx++;
            }
            if (!otherFault) {
                if (hoursval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
            }
            if (!otherFault) {
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (subIdx != subIndex && hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                if (hoursval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                    hoursval[parseInt(dayIndex)].innerHTML = "";
                    valInfo.innerHTML = "";
                }
            }
            else {
                failValidation = true;
            }
        }
        else if (hourType == 2) {
            while (!otherFault && subIdx < numberOfSubAssistants) {
                if (subIdx != subIndex &&
                    unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
                subIdx++;
            }
            if (!otherFault) {
                if (unsocialeveningval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
            }
            if (!otherFault) {
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (subIdx != subIndex && unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                if (unsocialeveningval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                    unsocialeveningval[parseInt(dayIndex)].innerHTML = "";
                    valInfo.innerHTML = "";
                }
            }
            else {
                failValidation = true;
            }
        }
        else if (hourType == 3) {
            while (!otherFault && subIdx < numberOfSubAssistants) {
                if (subIdx != subIndex &&
                    unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
                subIdx++;
            }
            if (!otherFault) {
                if (unsocialnightval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
            }
            if (!otherFault) {
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (subIdx != subIndex && unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                if (unsocialnightval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                    unsocialnightval[parseInt(dayIndex)].innerHTML = "";
                    valInfo.innerHTML = "";
                }
            }
            else {
                failValidation = true;
            }
        }
        else if (hourType == 4) {
            while (!otherFault && subIdx < numberOfSubAssistants) {
                if (subIdx != subIndex &&
                    unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
                subIdx++;
            }
            if (!otherFault) {
                if (unsocialweekendval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
            }
            if (!otherFault) {
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (subIdx != subIndex && unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                if (unsocialweekendval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                    unsocialweekendval[parseInt(dayIndex)].innerHTML = "";
                    valInfo.innerHTML = "";
                }
            }
            else {
                failValidation = true;
            }
        }
        else if (hourType == 5) {
            while (!otherFault && subIdx < numberOfSubAssistants) {
                if (subIdx != subIndex &&
                    unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
                subIdx++;
            }
            if (!otherFault) {
                if (unsocialgrandweekendval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
            }
            if (!otherFault) {
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (subIdx != subIndex && unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                if (unsocialgrandweekendval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                    unsocialgrandweekendval[parseInt(dayIndex)].innerHTML = "";
                    valInfo.innerHTML = "";
                }
            }
            else {
                failValidation = true;
            }
        }
        else if (hourType == 6) {
            while (!otherFault && subIdx < numberOfSubAssistants) {
                if (subIdx != subIndex &&
                    oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
                subIdx++;
            }
            if (!otherFault) {
                if (oncalldayval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
            }
            if (!otherFault) {
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (subIdx != subIndex && oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                if (oncalldayval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                    oncalldayval[parseInt(dayIndex)].innerHTML = "";
                    valInfo.innerHTML = "";
                }
            }
            else {
                failValidation = true;
            }
        }
        else if (hourType == 7) {
            while (!otherFault && subIdx < numberOfSubAssistants) {
                if (subIdx != subIndex &&
                    oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
                subIdx++;
            }
            if (!otherFault) {
                if (oncallnightval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                    valInfo.innerHTML = "Annat fält måste rättas.";
                    otherFault = true;
                }
            }
            if (!otherFault) {
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (subIdx != subIndex && oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                if (oncallnightval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                    oncallnightval[parseInt(dayIndex)].innerHTML = "";
                    valInfo.innerHTML = "";
                }
            }
            else {
                failValidation = true;
            }
        }

        if (failValidation) {
            return false;
        }
        else {
            return true;
        }
    }


    function checkInput(noOfHours, valInfo, hourType, dayIndex, subIndex) {
        //check if there is a point
        //check if there is a comma
        //check that string length is maximum 5
        //try parsing to float if no point and no comma and check that result is not greater than 25
        //if there is a comma check try parsing digits before the comma and check that the result is not greater than 25 and try parsing digits after comma and check that the result is not greater than 99.

        var amount = noOfHours.value;
        var amountInt = 0;
        var amountDec = 0;
        var failValidation = false;
        if (amount != "") {
            if (amount.length > 5) {
                valInfo.innerHTML = "Ogiltigt format eller värde.";
                failValidation = true;
            }
        }
        if (!failValidation && amount.search("\\.") != -1) { //contains a dot
            valInfo.innerHTML = "Ogiltigt format eller värde.";
            failValidation = true;
        }
        if (!failValidation) {
            pos = amount.search(",");
            if (pos != -1) { //contains a comma
                if (!pos == 0) { //comma is not in first position, check int part
                    amountInt = amount.substring(0, pos);
                    if (!isNaN(amountInt)) {
                        if (parseInt(amountInt) > 25 || parseInt(amountInt) < 0) {
                            valInfo.innerHTML = "Ogiltigt format eller värde.";
                            failValidation = true;
                        }
                    }
                    else {
                        valInfo.innerHTML = "Ogiltigt format eller värde.";
                        failValidation = true;
                    }
                }
                if (!failValidation) {
                    if (pos != amount.length - 1) { //comma is not in last position, check dec part
                        amountDec = amount.substring(pos + 1);
                        if (!isNaN(amountDec)) {
                            if (parseInt(amountDec) > 99 || parseInt(amountDec) < 0) {
                                valInfo.innerHTML = "Ogiltigt format eller värde.";
                                failValidation = true;
                            }
                        }
                        else {
                            valInfo.innerHTML = "Ogiltigt format eller värde.";
                            failValidation = true;
                        }
                    }
                }
            }
            else { //does not contain a comma
                if (isNaN(amount)) {
                    valInfo.innerHTML = "Ogiltigt format eller värde.";
                    failValidation = true;
                }
                else if (parseInt(amount) > 25 || parseInt(amount) < 0) {
                    valInfo.innerHTML = "Ogiltigt format eller värde.";
                    failValidation = true;
                }
            }
        }

        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;
        var numberOfSubAssistants = numberOfHoursSI.length / numberOfSickDays;

        //Check that there are no format errors for that dayIdx. If allowed, format errors would prevent a correct calculation of the "consumed" hours
        var unsocialEvening = document.getElementsByClassName("unsocial-evening");
        var unsocialNight = document.getElementsByClassName("unsocial-night");
        var unsocialWeekend = document.getElementsByClassName("unsocial-weekend");
        var unsocialGrandWeekend = document.getElementsByClassName("unsocial-grandweekend");
        var oncallDay = document.getElementsByClassName("oncall-day");
        var oncallNight = document.getElementsByClassName("oncall-night");

        var hoursval = document.getElementsByClassName('hours-val');
        var unsocialeveningval = document.getElementsByClassName('unsocial-evening-val');
        var unsocialnightval = document.getElementsByClassName('unsocial-night-val');
        var unsocialweekendval = document.getElementsByClassName('unsocial-weekend-val');
        var unsocialgrandweekendval = document.getElementsByClassName('unsocial-grandweekend-val');
        var oncalldayval = document.getElementsByClassName('oncall-day-val');
        var oncallnightval = document.getElementsByClassName('oncall-night-val');

        var unsocialEveningSI = document.getElementsByClassName("unsocial-evening-si");
        var unsocialNightSI = document.getElementsByClassName("unsocial-night-si");
        var unsocialWeekendSI = document.getElementsByClassName("unsocial-weekend-si");
        var unsocialGrandWeekendSI = document.getElementsByClassName("unsocial-grandweekend-si");
        var oncallDaySI = document.getElementsByClassName("oncall-day-si");
        var oncallNightSI = document.getElementsByClassName("oncall-night-si");

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
        var unsocialnightvalsi = document.getElementsByClassName('unsocial-night-si-val');
        var unsocialweekendvalsi = document.getElementsByClassName('unsocial-weekend-si-val');
        var unsocialgrandweekendvalsi = document.getElementsByClassName('unsocial-grandweekend-si-val');
        var oncalldayvalsi = document.getElementsByClassName('oncall-day-si-val');
        var oncallnightvalsi = document.getElementsByClassName('oncall-night-si-val');

        if (!failValidation) {
            var otherFault = false;
            var subIdx = 0;
            if (hourType == 1) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (hoursval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (hoursval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        hoursval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 2) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (unsocialeveningval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (unsocialeveningval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialeveningval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 3) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (unsocialnightval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (unsocialnightval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialnightval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 4) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (unsocialweekendval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (unsocialweekendval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialweekendval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 5) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (unsocialgrandweekendval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (unsocialgrandweekendval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        unsocialgrandweekendval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 6) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (oncalldayval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (oncalldayval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        oncalldayval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
            else if (hourType == 7) {
                while (!otherFault && subIdx < numberOfSubAssistants) {
                    if (subIdx != subIndex &&
                        oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                    subIdx++;
                }
                if (!otherFault) {
                    if (oncallnightval[parseInt(dayIndex)].innerHTML == "Ogiltigt format eller värde.") {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                        otherFault = true;
                    }
                }
                if (!otherFault) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex && oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                            oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                            valInfo.innerHTML = "";
                        }
                    }
                    if (oncallnightval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                        oncallnightval[parseInt(dayIndex)].innerHTML = "";
                        valInfo.innerHTML = "";
                    }
                }
                else {
                    failValidation = true;
                }
            }
        }


        //check that the sum of the substitutes' hours is not greater than the regular assistant's hours
        if (!failValidation) {
            var sumSIHours = 0;
            if (hourType == 1) {
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && numberOfHours[dayIndex].value == "") {
                    valInfo.innerHTML = "Ordinarie assistent måste fyllas i först.";
                    failValidation = true;
                }
                else {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (numberOfHoursSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                            sumSIHours += parseFloat(numberOfHoursSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                        }
                    }
                }
                if (!failValidation && sumSIHours > 0 && sumSIHours > parseFloat(numberOfHours[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    clearHoursPerDayMsg(subIndex, dayIndex, hourType);
                    checkUnsocialHours(subIndex, dayIndex, hourType, false);
                    failValidation = true;
                }
                else {
                    //var hoursvalsi = document.getElementsByClassName('hours-si-val');
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                            checkUnsocialHours(subIdx, dayIndex, hourType, true);
                            //hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        }
                    }
                    if (subIndex != 99 &&
                        hoursval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                        checkUnsocialHours(subIndex, dayIndex, hourType, true);
                        hoursval[parseInt(dayIndex)].innerHTML = "";
                    }
                }
                if (subIndex == 99) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ordinarie assistent måste fyllas i först.") {
                            checkUnsocialHours(subIdx, dayIndex, hourType, true);
                        }
                    }
                }
            }
            else if (hourType == 2) {
                var unsocialEvening = document.getElementsByClassName("unsocial-evening");
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && unsocialEvening[dayIndex].value == "") {
                    valInfo.innerHTML = "Ordinarie assistent måste fyllas i först.";
                    failValidation = true;
                }
                else {
                    //var unsocialEveningSI = document.getElementsByClassName("unsocial-evening-si");
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (unsocialEveningSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                            sumSIHours += parseFloat(unsocialEveningSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                        }
                    }
                }
                if (!failValidation && sumSIHours > 0 && sumSIHours > parseFloat(unsocialEvening[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
                else {
                    //var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                            unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        }
                    }
                    if (subIndex != 99 &&
                        unsocialeveningval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                        unsocialeveningval[parseInt(dayIndex)].innerHTML = "";
                    }
                }
                if (subIndex == 99) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ordinarie assistent måste fyllas i först.") {
                            checkUnsocialHours(subIdx, dayIndex, hourType);
                        }
                    }
                }
            }
            else if (hourType == 3) {
                var unsocialNight = document.getElementsByClassName("unsocial-night");
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && unsocialNight[dayIndex].value == "") {
                    valInfo.innerHTML = "Ordinarie assistent måste fyllas i först.";
                    failValidation = true;
                }
                else {
                    //var unsocialNightSI = document.getElementsByClassName("unsocial-night-si");
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (unsocialNightSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                            sumSIHours += parseFloat(unsocialNightSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                        }
                    }
                }
                if (!failValidation && sumSIHours > 0 && sumSIHours > parseFloat(unsocialNight[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
                else {
                    //var unsocialnightvalsi = document.getElementsByClassName('unsocial-night-si-val');
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                            checkUnsocialHours(subIdx, dayIndex, hourType, true);
                            //unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        }
                    }
                    if (subIndex != 99 &&
                        unsocialnightval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                        checkUnsocialHours(subIndex, dayIndex, hourType, true);
                        //unsocialnightval[parseInt(dayIndex)].innerHTML = "";
                    }
                }
                if (subIndex == 99) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ordinarie assistent måste fyllas i först.") {
                            checkUnsocialHours(subIdx, dayIndex, hourType);
                        }
                    }
                }
            }
            else if (hourType == 4) {
                var unsocialWeekend = document.getElementsByClassName("unsocial-weekend");
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && unsocialWeekend[dayIndex].value == "") {
                    valInfo.innerHTML = "Ordinarie assistent måste fyllas i först.";
                    failValidation = true;
                }
                else {
                    //var unsocialWeekendSI = document.getElementsByClassName("unsocial-weekend-si");
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (unsocialWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                            sumSIHours += parseFloat(unsocialWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                        }
                    }
                }
                if (!failValidation && sumSIHours > 0 && sumSIHours > parseFloat(unsocialWeekend[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
                else {
                    //var unsocialweekendvalsi = document.getElementsByClassName('unsocial-weekend-si-val');
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                            unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        }
                    }
                    if (subIndex != 99 &&
                        unsocialweekendval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                        unsocialweekendval[parseInt(dayIndex)].innerHTML = "";
                    }
                }
                if (subIndex == 99) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ordinarie assistent måste fyllas i först.") {
                            checkUnsocialHours(subIdx, dayIndex, hourType);
                        }
                    }
                }
            }
            else if (hourType == 5) {
                var unsocialGrandWeekend = document.getElementsByClassName("unsocial-grandweekend");
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && unsocialGrandWeekend[dayIndex].value == "") {
                    valInfo.innerHTML = "Ordinarie assistent måste fyllas i först.";
                    failValidation = true;
                }
                else {
                    //var unsocialGrandWeekendSI = document.getElementsByClassName("unsocial-grandweekend-si");
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (unsocialGrandWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                            sumSIHours += parseFloat(unsocialGrandWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                        }
                    }
                }
                if (!failValidation && sumSIHours > 0 && sumSIHours > parseFloat(unsocialGrandWeekend[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    failValidation = true;
                }
                else {
                    //var unsocialgrandweekendvalsi = document.getElementsByClassName('unsocial-grandweekend-si-val');
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex &&
                            unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ordinarie assistent måste fyllas i först." &&
                            unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                            unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        }
                    }
                    if (subIndex != 99 &&
                        unsocialgrandweekendval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                        unsocialgrandweekendval[parseInt(dayIndex)].innerHTML = "";
                    }
                }
                if (subIndex == 99) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        //if (unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ordinarie assistent måste fyllas i först." ||
                        //    unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                        checkUnsocialHours(subIdx, dayIndex, hourType);
                        //}
                    }
                }
            }
            else if (hourType == 6) {
                var oncallDay = document.getElementsByClassName("oncall-day");
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && oncallDay[dayIndex].value == "") {
                    valInfo.innerHTML = "Ordinarie assistent måste fyllas i först.";
                    failValidation = true;
                }
                else {
                    //var oncallDaySI = document.getElementsByClassName("oncall-day-si");
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (oncallDaySI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                            sumSIHours += parseFloat(oncallDaySI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                        }
                    }
                }
                if (!failValidation && sumSIHours > 0 && sumSIHours > parseFloat(oncallDay[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    clearHoursPerDayMsg(subIndex, dayIndex, hourType);
                    failValidation = true;
                }
                else {
                    //var oncalldayvalsi = document.getElementsByClassName('oncall-day-si-val');
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (subIdx != subIndex &&
                            oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                            oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        }
                    }
                    if (subIndex != 99 &&
                        oncalldayval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                        oncalldayval[parseInt(dayIndex)].innerHTML = "";
                    }
                }
                if (subIndex == 99) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ordinarie assistent måste fyllas i först.") {
                            oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        }
                    }
                }
            }
            else if (hourType == 7) {
                var oncallNight = document.getElementsByClassName("oncall-night");
                if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && oncallNight[dayIndex].value == "") {
                    valInfo.innerHTML = "Ordinarie assistent måste fyllas i först.";
                    failValidation = true;
                }
                else {
                    //var oncallNightSI = document.getElementsByClassName("oncall-night-si");
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (oncallNightSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                            sumSIHours += parseFloat(oncallNightSI[(subIdx * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                        }
                    }
                }
                if (!failValidation && sumSIHours > 0 && sumSIHours > parseFloat(oncallNight[parseInt(dayIndex)].value.replace(',', '.'))) {
                    valInfo.innerHTML = "För högt antal vikarietimmar.";
                    clearHoursPerDayMsg(subIndex, dayIndex, hourType);
                    failValidation = true;
                }
                else {
                    //var oncallnightvalsi = document.getElementsByClassName('oncall-night-si-val');
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                            oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        }
                    }
                    if (oncallnightval[parseInt(dayIndex)].innerHTML != "Ogiltigt format eller värde.") {
                        oncallnightval[parseInt(dayIndex)].innerHTML = "";
                    }
                }
                if (subIndex == 99) {
                    for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                        if (oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Ordinarie assistent måste fyllas i först.") {
                            oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                        }
                    }
                }
            }
        }

        //check that the sum of the assistant's unsocial hours is not greater than the working hours for that assistant
        if (!failValidation) {
            var otherFault = false;
            var otherFaultSI = false;
            //regular assistant
            if (subIndex == 99) {
                //check if there are any faults in working hours and unsocial hours
                if (hourType == 1 || hourType == 2 || hourType == 3 || hourType == 4 || hourType == 5) {
                    //Code to be added
                    if (hourType != 1 &&
                        hoursval[parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        hoursval[parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                        hoursval[parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 2 &&
                        unsocialeveningval[parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialeveningval[parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                        unsocialeveningval[parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 3 &&
                        unsocialnightval[parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialnightval[parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                        unsocialnightval[parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 4 &&
                        unsocialweekendval[parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialweekendval[parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                        unsocialweekendval[parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 5 &&
                        unsocialgrandweekendval[parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialgrandweekendval[parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                        unsocialgrandweekendval[parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (!otherFault) {
                        var sumUnsocialHours = 0;
                        if (!failValidation) {
                            //var unsocialEvening = document.getElementsByClassName("unsocial-evening");
                            if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && numberOfHours[dayIndex].value == "") {
                                hoursval[parseInt(dayIndex)].innerHTML = "Arbetstimmar måste fyllas i först."; //should this msg be on valinfo?
                                failValidation = true;
                            }
                            else {
                                if (unsocialEvening[parseInt(dayIndex)].value != "") {
                                    sumUnsocialHours += parseFloat(unsocialEvening[parseInt(dayIndex)].value.replace(',', '.'));
                                }
                                if (unsocialNight[parseInt(dayIndex)].value != "") {
                                    sumUnsocialHours += parseFloat(unsocialNight[parseInt(dayIndex)].value.replace(',', '.'));
                                }
                                if (unsocialWeekend[parseInt(dayIndex)].value != "") {
                                    sumUnsocialHours += parseFloat(unsocialWeekend[parseInt(dayIndex)].value.replace(',', '.'));
                                }
                                if (unsocialGrandWeekend[parseInt(dayIndex)].value != "") {
                                    sumUnsocialHours += parseFloat(unsocialGrandWeekend[parseInt(dayIndex)].value.replace(',', '.'));
                                }

                            }
                            if (!failValidation && sumUnsocialHours > 0 && sumUnsocialHours > parseFloat(numberOfHours[parseInt(dayIndex)].value.replace(',', '.'))) {
                                valInfo.innerHTML = "För högt antal OB-timmar.";
                                failValidation = true;
                            }
                            else {
                                if (hoursval[parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar." ||
                                    hoursval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    hoursval[parseInt(dayIndex)].innerHTML = "";
                                }
                                if (unsocialeveningval[parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar." ||
                                    unsocialeveningval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    unsocialeveningval[parseInt(dayIndex)].innerHTML = "";
                                }
                                if (unsocialnightval[parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar." ||
                                    unsocialnightval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    unsocialnightval[parseInt(dayIndex)].innerHTML = "";
                                }
                                if (unsocialweekendval[parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar." ||
                                    unsocialweekendval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    unsocialweekendval[parseInt(dayIndex)].innerHTML = "";
                                }
                                if (unsocialgrandweekendval[parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar." ||
                                    unsocialgrandweekendval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    unsocialgrandweekendval[parseInt(dayIndex)].innerHTML = "";
                                }
                            }
                        }
                    }
                    else {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                    }
                }
            }
            //substitute assistants
            else {
                //check if there are any faults in working hours and unsocial hours
                if (hourType == 1 || hourType == 2 || hourType == 3 || hourType == 4 || hourType == 5) {
                    //Code to be added
                    if (hourType != 1 &&
                        hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                        hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 2 &&
                        unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal vikarietimmar." &&
                        unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 3 &&
                        unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal vikarietimmar." &&
                        unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 4 &&
                        unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal vikarietimmar." &&
                        unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 5 &&
                        unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal vikarietimmar." &&
                        unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }

                    if (!otherFault) {

                        var sumUnsocialSIHours = 0;
                        if (!failValidation) {
                            if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value == "") {
                                hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "Arbetstimmar måste fyllas i först."; //should this msg be on valinfo?
                                failValidation = true;
                            }
                            else {
                                if (unsocialEveningSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                                    sumUnsocialSIHours += parseFloat(unsocialEveningSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                                }
                                if (unsocialNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                                    sumUnsocialSIHours += parseFloat(unsocialNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                                }
                                if (unsocialWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                                    sumUnsocialSIHours += parseFloat(unsocialWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                                }
                                if (unsocialGrandWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                                    sumUnsocialSIHours += parseFloat(unsocialGrandWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                                }

                            }
                            if (!failValidation && sumUnsocialSIHours > 0 && sumUnsocialSIHours > parseFloat(numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'))) {
                                valInfo.innerHTML = "För högt antal OB-timmar.";
                                failValidation = true;
                            }
                            else {
                                //var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
                                if (hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar." ||
                                    hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                                }
                                if (unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar." ||
                                    unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                                }
                                if (unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar." ||
                                    unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                                }
                                if (unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar." ||
                                    unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                                }
                                if (unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar." ||
                                    unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                                }
                            }
                        }
                        else {
                            valInfo.innerHTML = "Annat fält måste rättas.";
                        }
                    }
                }

            }
        }

        //check that the sum of the assistant's hours and oncall hours is not greater than 25 for one day
        if (!failValidation) {
            var otherFault = false;
            //regular assistant
            if (subIndex == 99) {
                //check if there are any faults in working hours and unsocial hours
                if (hourType == 1 || hourType == 6 || hourType == 7) {
                    //Code to be added
                    if (hourType != 1 &&
                        hoursval[parseInt(dayIndex)].innerHTML != "För högt antal timmar för dagen." &&
                        hoursval[parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                        hoursval[parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 6 &&
                        oncalldayval[parseInt(dayIndex)].innerHTML != "För högt antal timmar för dagen." &&
                        oncalldayval[parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                        oncalldayval[parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 7 &&
                        oncallnightval[parseInt(dayIndex)].innerHTML != "För högt antal timmar för dagen." &&
                        oncallnightval[parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                        oncallnightval[parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (!otherFault) {
                        var sumHours = 0;
                        if (!failValidation) {
                            if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && numberOfHours[dayIndex].value == "") {
                                hoursval[parseInt(dayIndex)].innerHTML = "Arbetstimmar måste fyllas i först."; //should this msg be on valinfo?
                                failValidation = true;
                            }
                            else {
                                if (numberOfHours[parseInt(dayIndex)].value != "") {
                                    sumHours += parseFloat(numberOfHours[parseInt(dayIndex)].value.replace(',', '.'));
                                }
                                if (oncallDay[parseInt(dayIndex)].value != "") {
                                    sumHours += parseFloat(oncallDay[parseInt(dayIndex)].value.replace(',', '.'));
                                }
                                if (oncallNight[parseInt(dayIndex)].value != "") {
                                    sumHours += parseFloat(oncallNight[parseInt(dayIndex)].value.replace(',', '.'));
                                }
                            }
                            if (!failValidation && sumHours > 25) {
                                valInfo.innerHTML = "För högt antal timmar för dagen.";
                                failValidation = true;
                            }
                            else {
                                if (hoursval[parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen." ||
                                    hoursval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    hoursval[parseInt(dayIndex)].innerHTML = "";
                                }
                                if (oncalldayval[parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen." ||
                                    oncalldayval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    oncalldayval[parseInt(dayIndex)].innerHTML = "";
                                }
                                if (oncallnightval[parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen." ||
                                    oncallnightval[parseInt(dayIndex)].innerHTML == "Annat fält måste rättas.") {
                                    oncallnightval[parseInt(dayIndex)].innerHTML = "";
                                }
                            }
                        }
                    }
                    else {
                        valInfo.innerHTML = "Annat fält måste rättas.";
                    }
                }
            }
            //substitute assistants
            else {
                //check if there are any faults in working hours and unsocial hours
                if (hourType == 2 || hourType == 3 || hourType == 4 || hourType == 5) {
                    //Code to be added
                    if (hourType != 2 &&
                        unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal vikarietimmar." &&
                        unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 3 &&
                        unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal vikarietimmar." &&
                        unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 4 &&
                        unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal vikarietimmar." &&
                        unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }
                    if (hourType != 5 &&
                        unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal OB-timmar." &&
                        unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal vikarietimmar." &&
                        unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                        otherFault = true;
                    }

                    if (!otherFault) {

                        var sumUnsocialSIHours = 0;
                        if (!failValidation) {
                            if (amount != "" && parseFloat(amount) != 0 && amount != "0,00" && numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value == "") {
                                hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "Arbetstimmar måste fyllas i först."; //should this msg be on valinfo?
                                failValidation = true;
                            }
                            else {
                                if (unsocialEveningSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                                    sumUnsocialSIHours += parseFloat(unsocialEveningSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                                }
                                if (unsocialNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                                    sumUnsocialSIHours += parseFloat(unsocialNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                                }
                                if (unsocialWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                                    sumUnsocialSIHours += parseFloat(unsocialWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                                }
                                if (unsocialGrandWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                                    sumUnsocialSIHours += parseFloat(unsocialGrandWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                                }

                            }
                            if (!failValidation && sumUnsocialSIHours > 0 && sumUnsocialSIHours > parseFloat(numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'))) {
                                valInfo.innerHTML = "För högt antal OB-timmar.";
                                failValidation = true;
                            }
                            else {
                                //var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
                                if (unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                                    unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                                }
                                if (unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                                    unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                                }
                                if (unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                                    unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                                }
                                if (unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal OB-timmar.") {
                                    unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                                }
                            }
                        }
                        else {
                            valInfo.innerHTML = "Annat fält måste rättas.";
                        }
                    }
                }

            }
        }

        if (!failValidation && !otherFault) {
            valInfo.innerHTML = "";
        }
    }

    function checkUnsocialHours(subIndex, dayIndex, hourType, clearVal) {
        var unsocialEveningSI = document.getElementsByClassName("unsocial-evening-si");
        var unsocialNightSI = document.getElementsByClassName("unsocial-night-si");
        var unsocialWeekendSI = document.getElementsByClassName("unsocial-weekend-si");
        var unsocialGrandWeekendSI = document.getElementsByClassName("unsocial-grandweekend-si");

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
        var unsocialnightvalsi = document.getElementsByClassName('unsocial-night-si-val');
        var unsocialweekendvalsi = document.getElementsByClassName('unsocial-weekend-si-val');
        var unsocialgrandweekendvalsi = document.getElementsByClassName('unsocial-grandweekend-si-val');

        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;

        var sumUnsocialHours = 0;
        var tooManyHours = false;

        if (unsocialEveningSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
            sumUnsocialHours += parseFloat(unsocialEveningSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
        }
        if (unsocialNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
            sumUnsocialHours += parseFloat(unsocialNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
        }
        if (unsocialWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
            sumUnsocialHours += parseFloat(unsocialWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
        }
        if (unsocialGrandWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
            sumUnsocialHours += parseFloat(unsocialGrandWeekendSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
        }

        if (numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "" &&
            sumUnsocialHours > parseFloat(numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'))) {
            tooManyHours = true;
        }

        if (tooManyHours && hourType == 1) {
            hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar.";
        }
        else if (!tooManyHours && hourType == 1 && clearVal) {
            hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
        }

        if (tooManyHours && hourType == 2) {
            unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar.";
        }
        else if (!tooManyHours && hourType == 2 && clearVal) {
            unsocialeveningvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
        }
        if (tooManyHours && hourType == 3) {
            unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar.";
        }
        else if (!tooManyHours && hourType == 3 && clearVal) {
            unsocialnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
        }
        if (tooManyHours && hourType == 4) {
            unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar.";
        }
        else if (!tooManyHours && hourType == 4 && clearVal) {
            unsocialweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
        }
        if (tooManyHours && hourType == 5) {
            unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "För högt antal OB-timmar.";
        }
        else if (!tooManyHours && hourType == 5 && clearVal) {
            unsocialgrandweekendvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
        }
    }

    function clearHoursPerDayMsg(subIndex, dayIndex, hourType) {
        //calculate number of sickdays and number of substitute assistants
        var numberOfHours = document.getElementsByClassName("hours");
        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var numberOfSickDays = numberOfHours.length;
        var numberOfSubAssistants = numberOfHoursSI.length / numberOfSickDays;

        var oncallDay = document.getElementsByClassName("oncall-day");
        var oncallNight = document.getElementsByClassName("oncall-night");

        var hoursval = document.getElementsByClassName('hours-val')
        var oncalldayval = document.getElementsByClassName('oncall-day-val');
        var oncallnightval = document.getElementsByClassName('oncall-night-val');

        var oncallDaySI = document.getElementsByClassName("oncall-day-si");
        var oncallNightSI = document.getElementsByClassName("oncall-night-si");

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var oncalldayvalsi = document.getElementsByClassName('oncall-day-si-val');
        var oncallnightvalsi = document.getElementsByClassName('oncall-night-si-val');

        var sumHours = 0;
        var otherFault = false;
        if (subIndex == 99) {
            if (hourType != 1 &&
                hoursval[parseInt(dayIndex)].innerHTML != "För högt antal timmar för dagen." &&
                hoursval[parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                hoursval[parseInt(dayIndex)].innerHTML != "") {
                otherFault = true;
            }
            if (hourType != 6 &&
                oncalldayval[parseInt(dayIndex)].innerHTML != "För högt antal timmar för dagen." &&
                oncalldayval[parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                oncalldayval[parseInt(dayIndex)].innerHTML != "") {
                otherFault = true;
            }
            if (hourType != 7 &&
                oncallnightval[parseInt(dayIndex)].innerHTML != "För högt antal timmar för dagen." &&
                oncallnightval[parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                oncallnightval[parseInt(dayIndex)].innerHTML != "") {
                otherFault = true;
            }
            if (!otherFault) {
                if (numberOfHours[parseInt(dayIndex)].value != "") {
                    sumHours += parseFloat(numberOfHours[parseInt(dayIndex)].value.replace(',', '.'));
                }
                if (oncallDay[parseInt(dayIndex)].value != "") {
                    sumHours += parseFloat(oncallDay[parseInt(dayIndex)].value.replace(',', '.'));
                }
                if (oncallNight[parseInt(dayIndex)].value != "") {
                    sumHours += parseFloat(oncallNight[parseInt(dayIndex)].value.replace(',', '.'));
                }
                if (sumHours <= 25) {
                    if (hourType != 1 && hoursval[parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                        hoursval[parseInt(dayIndex)].innerHTML = "";
                    }
                    if (hourType != 6 && oncalldayval[parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                        oncalldayval[parseInt(dayIndex)].innerHTML = "";
                    }
                    if (hourType != 7 && oncallnightval[parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                        oncallnightval[parseInt(dayIndex)].innerHTML = "";
                    }
                }
            }
        }
        else {
            if (hourType != 1 &&
                hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal timmar för dagen." &&
                hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                otherFault = true;
            }
            if (hourType != 6 &&
                oncalldayvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal timmar för dagen." &&
                oncalldayvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                oncalldayvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                otherFault = true;
            }
            if (hourType != 7 &&
                oncallnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "För högt antal timmar för dagen." &&
                oncallnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "Annat fält måste rättas." &&
                oncallnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML != "") {
                otherFault = true;
            }
            if (!otherFault) {
                if (numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                    sumHours += parseFloat(numberOfHoursSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                }
                if (oncallDaySI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                    sumHours += parseFloat(oncallDaySI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                }
                if (oncallNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value != "") {
                    sumHours += parseFloat(oncallNightSI[(subIndex * numberOfSickDays) + parseInt(dayIndex)].value.replace(',', '.'));
                }
                if (sumHours <= 25) {
                    if (hourType != 1 && hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                        hoursvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                    }
                    if (hourType != 6 && oncalldayvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                        oncalldayvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                    }
                    if (hourType != 7 && oncallnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML == "För högt antal timmar för dagen.") {
                        oncallnightvalsi[(subIndex * numberOfSickDays) + parseInt(dayIndex)].innerHTML = "";
                    }
                }
            }
        }
    }

    function copyRestToStandin(pos) {
        var numberOfHours = document.getElementsByClassName("hours");
        var unsocialEvening = document.getElementsByClassName("unsocial-evening");
        var unsocialNight = document.getElementsByClassName("unsocial-night");
        var unsocialWeekend = document.getElementsByClassName("unsocial-weekend");
        var unsocialGrandWeekend = document.getElementsByClassName("unsocial-grandweekend");
        var oncallDay = document.getElementsByClassName("oncall-day");
        var oncallNight = document.getElementsByClassName("oncall-night");

        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var unsocialEveningSI = document.getElementsByClassName("unsocial-evening-si");
        var unsocialNightSI = document.getElementsByClassName("unsocial-night-si");
        var unsocialWeekendSI = document.getElementsByClassName("unsocial-weekend-si");
        var unsocialGrandWeekendSI = document.getElementsByClassName("unsocial-grandweekend-si");
        var oncallDaySI = document.getElementsByClassName("oncall-day-si");
        var oncallNightSI = document.getElementsByClassName("oncall-night-si");

        var consumedHours = 0;
        var consumedUnsocialEvening = 0;
        var consumedUnsocialNight = 0;
        var consumedUnsocialWeekend = 0;
        var consumedUnsocialGrandWeekend = 0;
        var consumedOnCallDay = 0;
        var consumedOnCallNight = 0;

        //calculate the number of consumed hours by other substitute assistants
        //numberOfHours.length is equal to the number of sickdays
        //the number of substitute assistants can be calculated as numberOfHoursSI.length divided by numberOfHours.length
        var numberOfSickDays = numberOfHours.length;
        var numberOfSubAssistants = numberOfHoursSI.length / numberOfSickDays;

        //check if there are any validation errors before copying
        var hoursval = document.getElementsByClassName('hours-val');
        var unsocialeveningval = document.getElementsByClassName('unsocial-evening-val');
        var unsocialnightval = document.getElementsByClassName('unsocial-night-val');
        var unsocialweekendval = document.getElementsByClassName('unsocial-weekend-val');
        var unsocialgrandweekendval = document.getElementsByClassName('unsocial-grandweekend-val');
        var oncalldayval = document.getElementsByClassName('oncall-day-val');
        var oncallnightval = document.getElementsByClassName('oncall-night-val');

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
        var unsocialnightvalsi = document.getElementsByClassName('unsocial-night-si-val');
        var unsocialweekendvalsi = document.getElementsByClassName('unsocial-weekend-si-val');
        var unsocialgrandweekendvalsi = document.getElementsByClassName('unsocial-grandweekend-si-val');
        var oncalldayvalsi = document.getElementsByClassName('oncall-day-si-val');
        var oncallnightvalsi = document.getElementsByClassName('oncall-night-si-val');

        var restvalsi = document.getElementsByClassName('rest-val');

        var validationErrorFound = false;
        var dayIdx = 0;
        var subIdx = 0;

        //check for validation errors for regular assistant
        while (!validationErrorFound && dayIdx < numberOfSickDays) {
            if (hoursval[parseInt(dayIdx)].innerHTML != "" ||
                unsocialeveningval[parseInt(dayIdx)].innerHTML != "" ||
                unsocialnightval[parseInt(dayIdx)].innerHTML != "" ||
                unsocialweekendval[parseInt(dayIdx)].innerHTML != "" ||
                unsocialgrandweekendval[parseInt(dayIdx)].innerHTML != "" ||
                oncalldayval[parseInt(dayIdx)].innerHTML != "" ||
                oncallnightval[parseInt(dayIdx)].innerHTML != "") {
                restvalsi[pos].innerHTML = "Fel måste rättas först.";
                validationErrorFound = true;
            }
            dayIdx++;
        }

        //check for validation errors for substitute assistants
        dayIdx = 0;
        while (!validationErrorFound && dayIdx < numberOfSickDays) {
            while (!validationErrorFound && subIdx < numberOfSubAssistants) {
                if (subIdx != pos) { //skip the hours for the substitute assistant to whom the remaining hours shall be written
                    if (hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "" ||
                        oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML != "") {
                        restvalsi[pos].innerHTML = "Fel måste rättas först.";
                        validationErrorFound = true;
                    }
                }
                subIdx++;
            }
            dayIdx++;
            subIdx = 0;
        }

        if (!validationErrorFound) {

            for (var dayIdx = 0; dayIdx < numberOfSickDays; dayIdx++) {
                for (var subIdx = 0; subIdx < numberOfSubAssistants; subIdx++) {
                    if (subIdx != pos) { //skip the hours for the substitute assistant to whom the remaining hours shall be written

                        if (numberOfHoursSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value != "") {
                            consumedHours += parseFloat(numberOfHoursSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value.replace(',', '.'));
                        }
                        if (unsocialEveningSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value != "") {
                            consumedUnsocialEvening += parseFloat(unsocialEveningSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value.replace(',', '.'));
                        }
                        if (unsocialNightSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value != "") {
                            consumedUnsocialNight += parseFloat(unsocialNightSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value.replace(',', '.'));
                        }
                        if (unsocialWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value != "") {
                            consumedUnsocialWeekend += parseFloat(unsocialWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value.replace(',', '.'));
                        }
                        if (unsocialGrandWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value != "") {
                            consumedUnsocialGrandWeekend += parseFloat(unsocialGrandWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value.replace(',', '.'));
                        }
                        if (oncallDaySI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value != "") {
                            consumedOnCallDay += parseFloat(oncallDaySI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value.replace(',', '.'));
                        }
                        if (oncallNightSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value != "") {
                            consumedOnCallNight += parseFloat(oncallNightSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value.replace(',', '.'));
                        }
                    }
                }

                if (numberOfHours[parseInt(dayIdx)].value != "") {
                    numberOfHoursSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = (parseFloat(numberOfHours[parseInt(dayIdx)].value.replace(',', '.')) - consumedHours).toFixed(2).replace('.', ',');
                }
                else {
                    numberOfHoursSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = "";
                    hoursvalsi[(pos * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
                }
                if (unsocialEvening[parseInt(dayIdx)].value != "") {
                    unsocialEveningSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = (parseFloat(unsocialEvening[parseInt(dayIdx)].value.replace(',', '.')) - consumedUnsocialEvening).toFixed(2).replace('.', ',');
                }
                else {
                    unsocialEveningSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = "";
                    unsocialeveningvalsi[(pos * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
                }
                if (unsocialNight[parseInt(dayIdx)].value != "") {
                    unsocialNightSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = (parseFloat(unsocialNight[parseInt(dayIdx)].value.replace(',', '.')) - consumedUnsocialNight).toFixed(2).replace('.', ',');
                }
                else {
                    unsocialNightSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = "";
                    unsocialnightvalsi[(pos * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
                }
                if (unsocialWeekend[parseInt(dayIdx)].value != "") {
                    unsocialWeekendSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = (parseFloat(unsocialWeekend[parseInt(dayIdx)].value.replace(',', '.')) - consumedUnsocialWeekend).toFixed(2).replace('.', ',');
                }
                else {
                    unsocialWeekendSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = "";
                    unsocialweekendvalsi[(pos * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
                }
                if (unsocialGrandWeekend[parseInt(dayIdx)].value != "") {
                    unsocialGrandWeekendSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = (parseFloat(unsocialGrandWeekend[parseInt(dayIdx)].value.replace(',', '.')) - consumedUnsocialGrandWeekend).toFixed(2).replace('.', ',');
                }
                else {
                    unsocialGrandWeekendSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = "";
                    unsocialgrandweekendvalsi[(pos * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
                }
                if (oncallDay[parseInt(dayIdx)].value != "") {
                    oncallDaySI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = (parseFloat(oncallDay[parseInt(dayIdx)].value.replace(',', '.')) - consumedOnCallDay).toFixed(2).replace('.', ',');
                }
                else {
                    oncallDaySI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = "";
                    oncalldayvalsi[(pos * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
                }
                if (oncallNight[parseInt(dayIdx)].value != "") {
                    oncallNightSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = (parseFloat(oncallNight[parseInt(dayIdx)].value.replace(',', '.')) - consumedOnCallNight).toFixed(2).replace('.', ',');
                }
                else {
                    oncallNightSI[(pos * numberOfSickDays) + parseInt(dayIdx)].value = "";
                    oncallnightvalsi[(pos * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
                }

                consumedHours = 0;
                consumedUnsocialEvening = 0;
                consumedUnsocialNight = 0;
                consumedUnsocialWeekend = 0;
                consumedUnsocialGrandWeekend = 0;
                consumedOnCallDay = 0;
                consumedOnCallNight = 0;
            }
        }
    }

    //reset function for regular assistant
    function resetHours() {
        var numberOfHours = document.getElementsByClassName("hours");
        var unsocialEvening = document.getElementsByClassName("unsocial-evening");
        var unsocialNight = document.getElementsByClassName("unsocial-night");
        var unsocialWeekend = document.getElementsByClassName("unsocial-weekend");
        var unsocialGrandWeekend = document.getElementsByClassName("unsocial-grandweekend");
        var oncallDay = document.getElementsByClassName("oncall-day");
        var oncallNight = document.getElementsByClassName("oncall-night");

        var hoursval = document.getElementsByClassName('hours-val');
        var unsocialeveningval = document.getElementsByClassName('unsocial-evening-val');
        var unsocialnightval = document.getElementsByClassName('unsocial-night-val');
        var unsocialweekendval = document.getElementsByClassName('unsocial-weekend-val');
        var unsocialgrandweekendval = document.getElementsByClassName('unsocial-grandweekend-val');
        var oncalldayval = document.getElementsByClassName('oncall-day-val');
        var oncallnightval = document.getElementsByClassName('oncall-night-val');

        //numberOfHours.length is equal to the number of sickdays
        var numberOfSickDays = numberOfHours.length;
        for (var dayIdx = 0; dayIdx < numberOfSickDays; dayIdx++) {
            numberOfHours[parseInt(dayIdx)].value = "";
            unsocialEvening[parseInt(dayIdx)].value = "";
            unsocialNight[parseInt(dayIdx)].value = "";
            unsocialWeekend[parseInt(dayIdx)].value = "";
            unsocialGrandWeekend[parseInt(dayIdx)].value = "";
            oncallDay[parseInt(dayIdx)].value = "";
            oncallNight[parseInt(dayIdx)].value = "";

            hoursval[parseInt(dayIdx)].innerHTML = "";
            unsocialeveningval[parseInt(dayIdx)].innerHTML = "";
            unsocialnightval[parseInt(dayIdx)].innerHTML = "";
            unsocialweekendval[parseInt(dayIdx)].innerHTML = "";
            unsocialgrandweekendval[parseInt(dayIdx)].innerHTML = "";
            oncalldayval[parseInt(dayIdx)].innerHTML = "";
            oncallnightval[parseInt(dayIdx)].innerHTML = "";
        }
    }

    function resetHoursSI(subIdx) {
        var numberOfHours = document.getElementsByClassName("hours");

        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var unsocialEveningSI = document.getElementsByClassName("unsocial-evening-si");
        var unsocialNightSI = document.getElementsByClassName("unsocial-night-si");
        var unsocialWeekendSI = document.getElementsByClassName("unsocial-weekend-si");
        var unsocialGrandWeekendSI = document.getElementsByClassName("unsocial-grandweekend-si");
        var oncallDaySI = document.getElementsByClassName("oncall-day-si");
        var oncallNightSI = document.getElementsByClassName("oncall-night-si");

        var hoursvalsi = document.getElementsByClassName('hours-si-val');
        var unsocialeveningvalsi = document.getElementsByClassName('unsocial-evening-si-val');
        var unsocialnightvalsi = document.getElementsByClassName('unsocial-night-si-val');
        var unsocialweekendvalsi = document.getElementsByClassName('unsocial-weekend-si-val');
        var unsocialgrandweekendvalsi = document.getElementsByClassName('unsocial-grandweekend-si-val');
        var oncalldayvalsi = document.getElementsByClassName('oncall-day-si-val');
        var oncallnightvalsi = document.getElementsByClassName('oncall-night-si-val');

        //numberOfHours.length is equal to the number of sickdays
        //the number of substitute assistants can be calculated as numberOfHoursSI.length divided by numberOfHours.length
        var numberOfSickDays = numberOfHours.length;
        for (var dayIdx = 0; dayIdx < numberOfSickDays; dayIdx++) {
            numberOfHoursSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value = "";
            unsocialEveningSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value = "";
            unsocialNightSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value = "";
            unsocialWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value = "";
            unsocialGrandWeekendSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value = "";
            oncallDaySI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value = "";
            oncallNightSI[(subIdx * numberOfSickDays) + parseInt(dayIdx)].value = "";

            hoursvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
            unsocialeveningvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
            unsocialnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
            unsocialweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
            unsocialgrandweekendvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
            oncalldayvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
            oncallnightvalsi[(subIdx * numberOfSickDays) + parseInt(dayIdx)].innerHTML = "";
        }
    }

    $(function () {
        $(".js-show-view-btn").click(function (e) {
            e.preventDefault();
            var $buttonClicked = $(this);
            var options = {
                "backdrop": "static",
                keyboard: true
            };
            $.ajax({
                method: "GET",
                url: "/Claims/_ShowClaim",
                contentType: "application/json; charset=utf-8",
                datatype: "json",
                data: { refNumber: this.innerHTML },
                cache: false,
                success: function (data, textStatus, jqXHR) {
                    $("#myModalContent").html(data);
                    $("#myModal").modal(options);
                    $("#myModal").modal('show');
                }
            });
        })
        $("#closbtn").click(function () {
            $('#myModal').modal('hide');
        });
    });

</script>