@model Sjuklöner.Viewmodels.Create2VM
@using Newtonsoft.Json

@{
    ViewBag.Title = "Create2";
}

<div class="row margin-breadcrumb">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Ansökningar", "Index", null, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Personuppgifter och sjukperiod", "Create1", new { refNumber = Model.ReferenceNumber }, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item active breadcrumb-font breadcrumb-padding" aria-current="page">Timmar</li>
        </ol>
    </nav>
</div>
@using (Html.BeginForm("Create2", "Claims", new { refNumber = Model.ReferenceNumber }, FormMethod.Post))
{
    @Html.AntiForgeryToken()
    for (int i = 0; i < Model.ScheduleRowList.Count(); i++)
    {
        //Html.HiddenFor(modelItem => modelItem.ScheduleRowList[i].ScheduleRowDateString);
        @Html.HiddenFor(modelItem => modelItem.ScheduleRowList[i].ScheduleRowDate);
        @Html.HiddenFor(modelItem => modelItem.ScheduleRowList[i].DayDate);
        @Html.HiddenFor(modelItem => modelItem.ScheduleRowList[i].ScheduleRowWeekDay);
    }
    @Html.HiddenFor(modelItem => modelItem.ReferenceNumber)

    <body>
        <div class="row">
            <p class="col col-md-2"></p>
            <p class="page-header3 col col-md-10">Ansökan om sjuklöneersättning</p>
        </div>
        <div class="row">
            <p class="col col-md-2"></p>
            <p class="col col-md-10 second-page-header2">Steg 2 av 4: Ange antal timmar</p>
        </div>

        <div class="row">
            <div class="form-horizontal">
                <div class="row">

                    @Html.ValidationSummary(true, "", new { @class = "text-danger font-size-11" })
                    <div class="col col-md-2 date-padding date-margin">
                        @for (int i = 0; i < Model.ScheduleRowList.Count(); i++)
                        {
                            <div class="row row-height-42 line-height-06">
                                <div class="col col-md-12 col-padding-40 schedule-date">
                                    @Html.DisplayFor(modelItem => Model.ScheduleRowList[i].ScheduleRowDateString)
                                </div>
                            </div>
                            @Html.HiddenFor(modelItem => Model.ScheduleRowList[i].ScheduleRowDateString)
                            <div class="row row-height-12 small-row-margin4 no-padding-left">
                                <div class="col col-md-12 col-padding-40">
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col col-md-9 div-assistant-frame div-padding">
                        <div2 class="row row-height">
                            <div class="col col-md-5 assistant-heading">
                                Ordinarie assistent
                            </div>
                            <div class="col col-md-3">
                                <button type="button" onclick="copyHoursToStandin()" class="btn btn-secondary btn-secondary-small-wide btn-copy-to-si">Kopiera till vikarie</button>
                            </div>
                        </div2>
                        <div class="row negative-padding-top">
                            <div class="col col-md-8 div-frame line-height-08 div-margin-left">
                                <div5 class="row height-18 role-padding line-height-08">
                                    Arbetstid
                                </div5>
                                <div6 class="row height-14 line-height-04">
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        Antal
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        varav
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        varav
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        varav
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        varav
                                    </div>
                                </div6>
                                <div6 class="row height-14 line-height-04">
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        timmar
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        OB-kväll
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        OB-natt
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        OB-helg
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        OB-storhelg
                                    </div>
                                </div6>
                                @for (int i = 0; i < Model.ScheduleRowList.Count(); i++)
                                {
                                    <div class="row row-height-24 small-row-margin3 line-height-10">
                                        <div class="col-md-nopadding col col-md-2">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].Hours, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 hours" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialEvening, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 unsocial-evening" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialNight, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 unsocial-night" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialWeekend, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 unsocial-weekend" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialGrandWeekend, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 unsocial-grandweekend" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">

                                        </div>
                                    </div>
                                    <div class="row row-height-30 small-row-margin4 no-padding-left2">
                                        <div class="small-errormessage col-md-nopadding col col-md-2">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].Hours, null, new { @class = "text-danger font-size-11" })
                                        </div>
                                        <div class="small-errormessage col-md-nopadding col col-md-2">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialEvening, null, new { @class = "text-danger font-size-11" })
                                        </div>
                                        <div class="small-errormessage col-md-nopadding col col-md-2">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialNight, null, new { @class = "text-danger font-size-11" })
                                        </div>
                                        <div class="small-errormessage col-md-nopadding col col-md-2">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialWeekend, null, new { @class = "text-danger font-size-11" })
                                        </div>
                                        <div class="small-errormessage col-md-nopadding col col-md-2">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialGrandWeekend, null, new { @class = "text-danger font-size-11" })
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="col col-md-3 div-frame line-height-08 div-oncall-hours">
                                <div5 class="row height-18 role-padding line-height-08">
                                    Jourtid, antal timmar
                                </div5>
                                <div6 class="row height-14 line-height-04">
                                    <div class="col col-md-5 bold-14 col-md-nopadding">
                                        Jour
                                    </div>
                                    <div class="col col-md-5 bold-14 oncall-margin col-md-nopadding">
                                        Jour
                                    </div>
                                </div6>
                                <div6 class="row height-14 line-height-04">
                                    <div class="col col-md-5 bold-14 col-md-nopadding">
                                        dag
                                    </div>
                                    <div class="col col-md-5 bold-14 oncall-margin col-md-nopadding">
                                        kväll/helg
                                    </div>
                                </div6>
                                @for (int i = 0; i < Model.ScheduleRowList.Count(); i++)
                                {
                                    <div class="row row-height-24 small-row-margin3 line-height-06">
                                        <div class="col-md-nopadding col col-md-5">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].OnCallDay, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 oncall-day" } })
                                        </div>
                                        <div class="col-md-nopadding oncall-margin col col-md-5">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].OnCallNight, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 oncall-night" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">

                                        </div>
                                    </div>
                                    <div class="no-padding-left4 row row-height-30 small-row-margin4">
                                    @*<div class="row row-height-30 small-row-margin3 no-padding-left2">*@
                                        <div class="no-padding-left3 small-errormessage2 col-md-nopadding col col-md-5">
                                        @*<div class="small-errormessage2 col-md-nopadding col col-md-5">*@
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].OnCallDay, "", new { @class = "text-danger font-size-11" })
                                        </div>
                                        <div class="no-padding-left5 small-errormessage2 col-md-nopadding col col-md-5">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].OnCallNight, "", new { @class = "text-danger font-size-11" })
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>


                    @*Stand-in assistant*@
                    <div class="col col-md-2 date-padding date-margin2">
                        @for (int i = 0; i < Model.ScheduleRowList.Count(); i++)
                        {
                            <div class="row row-height-42 line-height-06">
                                <div class="col col-md-12 col-padding-40 schedule-date">
                                    @Html.DisplayFor(modelItem => Model.ScheduleRowList[i].ScheduleRowDateString)
                                </div>
                            </div>
                            @Html.HiddenFor(modelItem => Model.ScheduleRowList[i].ScheduleRowDateString)
                            <div class="row row-height-12 small-row-margin4 no-padding-left">
                                <div class="col col-md-12 col-padding-40">
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col col-md-9 div-assistant-frame2 div-padding">
                        <div2 class="row row-height">
                            <div class="col col-md-5 assistant-heading">
                                Vikarierande assistent
                            </div>
                        </div2>
                        <div class="row negative-padding-top">
                            <div class="col col-md-8 div-frame line-height-08 div-margin-left">
                                <div5 class="row height-18 role-padding line-height-08">
                                    Arbetstid
                                </div5>
                                <div6 class="row height-14 line-height-04">
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        Antal
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        varav
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        varav
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        varav
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        varav
                                    </div>
                                </div6>
                                <div6 class="row height-14 line-height-04">
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        timmar
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        OB-kväll
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        OB-natt
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        OB-helg
                                    </div>
                                    <div class="col col-md-2 bold-14 col-md-nopadding">
                                        OB-storhelg
                                    </div>
                                </div6>
                                @for (int i = 0; i < Model.ScheduleRowList.Count(); i++)
                                {
                                    <div class="row row-height-24 small-row-margin3 line-height-06">
                                        <div class="col-md-nopadding col col-md-2">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].HoursSI, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 hours-si" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialEveningSI, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 unsocial-evening-si" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialNightSI, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 unsocial-night-si" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialWeekendSI, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 unsocial-weekend-si" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].UnsocialGrandWeekendSI, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 unsocial-grandweekend-si" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">

                                        </div>
                                    </div>
                                    <div class="row row-height-30 small-row-margin4 no-padding-left2">
                                        <div class="small-errormessage col-md-nopadding col col-md-2">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].HoursSI, null, new { @class = "text-danger font-size-11" })
                                        </div>
                                        <div class="small-errormessage col-md-nopadding col col-md-2">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialEveningSI, null, new { @class = "text-danger font-size-11" })
                                        </div>
                                        <div class="small-errormessage col-md-nopadding col col-md-2">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialNightSI, null, new { @class = "text-danger font-size-11" })
                                        </div>
                                        <div class="small-errormessage col-md-nopadding col col-md-2">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialWeekendSI, null, new { @class = "text-danger font-size-11" })
                                        </div>
                                        <div class="small-errormessage col-md-nopadding col col-md-2">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].UnsocialGrandWeekendSI, null, new { @class = "text-danger font-size-11" })
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="col col-md-3 div-frame line-height-08 div-oncall-hours">
                                <div5 class="row height-18 role-padding line-height-08">
                                    Jourtid, antal timmar
                                </div5>
                                <div6 class="row height-14 line-height-04">
                                    <div class="col col-md-5 bold-14 col-md-nopadding">
                                        Jour
                                    </div>
                                    <div class="col col-md-5 bold-14 oncall-margin col-md-nopadding">
                                        Jour
                                    </div>
                                </div6>
                                <div6 class="row height-14 line-height-04">
                                    <div class="col col-md-5 bold-14 col-md-nopadding">
                                        dag
                                    </div>
                                    <div class="col col-md-5 bold-14 oncall-margin col-md-nopadding">
                                        kväll/helg
                                    </div>
                                </div6>
                                @for (int i = 0; i < Model.ScheduleRowList.Count(); i++)
                                {
                                    <div class="row row-height-24 small-row-margin3 line-height-06">
                                        <div class="col-md-nopadding col col-md-5">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].OnCallDaySI, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 oncall-day-si" } })
                                        </div>
                                        <div class="col-md-nopadding oncall-margin col col-md-5">
                                            @Html.EditorFor(modelItem => Model.ScheduleRowList[i].OnCallNightSI, new { htmlAttributes = new { placeholder = "0,00", @class = "form-control small-form-control-time3 low-form-control2 border-radius-1 oncall-night-si" } })
                                        </div>
                                        <div class="col-md-nopadding col col-md-2">

                                        </div>
                                    </div>
                                    <div class="row row-height-30 small-row-margin3 no-padding-left2">
                                        <div class="col-no-margin-left small-errormessage col-md-nopadding col col-md-5">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].OnCallDaySI, "", new { @class = "text-danger font-size-11" })
                                        </div>
                                        <div class="col-no-margin-left small-errormessage col-md-nopadding oncall-margin col col-md-5">
                                            @Html.ValidationMessageFor(modelItem => Model.ScheduleRowList[i].OnCallNightSI, "", new { @class = "text-danger font-size-11" })
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="small-padding-left4 col col-md-offset-2 col-md-1">
                        <input class="btn btn-primary btn-primary-small" type="submit" name="submitButton" value="Till steg 3" id="proceed" />
                    </div>
                    <div class="small-padding-left5 col col-md-1">
                        <input class="btn btn-secondary btn-secondary-small" type="submit" name="submitButton" value="Spara" id="save" />
                    </div>
                    <div class="small-padding-left3 col col-md-1">
                        @Html.ActionLink(Model.ReferenceNumber, "_ShowClaim", new { refNumber = Model.ReferenceNumber }, new { @class = "btn-sm js-show-view-btn btn btn-secondary btn-secondary-small btn-left-margin-5" })
                        @*<a type="button" class="btn btn-secondary btn-secondary-small btn-left-margin-5" href="#" id="loadPartialActionLink">@Model.ReferenceNumber</a>*@
                    </div>
                    <div class="small-padding-left3 col col-md-1">
                        @Html.ActionLink("Avbryt", "IndexPageOmbud", null, new { @class = "btn btn-secondary btn-secondary-small" })
                    </div>
                    @*<div id="AJAXContainer"></div>*@
                    <div class="hidden-by-default" id="claimnumber">@Model.ReferenceNumber</div>
                    <div id='myModal' class='modal' style="text-align:left;">
                        <div class="modal-dialog" style="width:70%; height:400px; padding:10px;">
                            <div class="modal-content" style="overflow: auto; padding:10px; background-color:#fbf9ef;">
                                <button type="button" id="closbtn" float="right"> Stäng </button>
                                <div style="height:10px;">
                                </div>
                                <div id='myModalContent' style="width:1000px; height:400px; padding:10px;">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
}
<script type='text/javascript'>
    function calculateHours(id) {
        var data = @Html.Raw(JsonConvert.SerializeObject(this.Model));

        var startTimeHour = document.getElementsByClassName("start-time-hour");
        var startTimeMinute = document.getElementsByClassName("start-time-minute");
        var stopTimeHour = document.getElementsByClassName("stop-time-hour");
        var stopTimeMinute = document.getElementsByClassName("stop-time-minute");

        var startTimeHourOnCall = document.getElementsByClassName("start-time-hour-oncall");
        var startTimeMinuteOnCall = document.getElementsByClassName("start-time-minute-oncall");
        var stopTimeHourOnCall = document.getElementsByClassName("stop-time-hour-oncall");
        var stopTimeMinuteOnCall = document.getElementsByClassName("stop-time-minute-oncall");

        var numberOfCalcHours = document.getElementsByClassName("number-of-hours");
        var numberOfUnsocialHours = document.getElementsByClassName("number-of-unsocial-hours");
        var numberOfOnCallHours = document.getElementsByClassName("number-of-oncall-hours");

        var startTimeHourSI = document.getElementsByClassName("start-time-hour-si");
        var startTimeMinuteSI = document.getElementsByClassName("start-time-minute-si");
        var stopTimeHourSI = document.getElementsByClassName("stop-time-hour-si");
        var stopTimeMinuteSI = document.getElementsByClassName("stop-time-minute-si");

        var startTimeHourOnCallSI = document.getElementsByClassName("start-time-hour-oncall-si");
        var startTimeMinuteOnCallSI = document.getElementsByClassName("start-time-minute-oncall-si");
        var stopTimeHourOnCallSI = document.getElementsByClassName("stop-time-hour-oncall-si");
        var stopTimeMinuteOnCallSI = document.getElementsByClassName("stop-time-minute-oncall-si");

        var numberOfCalcHoursSI = document.getElementsByClassName("number-of-hours-si");
        var numberOfUnsocialHoursSI = document.getElementsByClassName("number-of-unsocial-hours-si");
        var numberOfOnCallHoursSI = document.getElementsByClassName("number-of-oncall-hours-si");

        var scheduleDate = document.getElementsByClassName("schedule-date");

        var startMinute;
        var stopMinute;
        var startMinuteOnCall;
        var stopMinuteOnCall;

        var startMinuteSI;
        var stopMinuteSI;
        var startMinuteOnCallSI;
        var stopMinuteOnCallSI;

        //alert(numberOfCalcHours.length);
        var numberOfHours = [];
        var numberOfMinutes = [];

        var numberOfMorningMinutes = 0;
        var numberOfMorningHours = 0;

        if (id === 1) {
            for (var i = 0; i < data.ScheduleRowList.length; i++) {
                //To be added: Check that the input is numeric, for example use var n = 'a'; if (+n === +n) { // is number }
                //To be added: Allowed range for hours and minutes? Or can that be done in the model?

                //Replace undefined minutes with minutes = 0
                if (!startTimeMinute[i].value || 0 === startTimeMinute[i].value.length) {
                    startMinute = 0;
                }
                else {
                    startMinute = parseFloat(startTimeMinute[i].value);
                }
                if (!stopTimeMinute[i].value || 0 === stopTimeMinute[i].value.length) {
                    stopMinute = 0;
                }
                else {
                    stopMinute = parseFloat(stopTimeMinute[i].value);
                }
                if (!startTimeMinuteOnCall[i].value || 0 === startTimeMinuteOnCall[i].value.length) {
                    startMinuteOnCall = 0;
                }
                else {
                    startMinuteOnCall = parseFloat(startTimeMinuteOnCall[i].value);
                }
                if (!stopTimeMinuteOnCall[i].value || 0 === stopTimeMinuteOnCall[i].value.length) {
                    stopMinuteOnCall = 0;
                }
                else {
                    stopMinuteOnCall = parseFloat(stopTimeMinuteOnCall[i].value);
                }

                if (startTimeHour[i].value != null && stopTimeHour[i].value != null && (parseFloat(stopTimeHour[i].value) >= parseFloat(startTimeHour[i].value))) {
                    numberOfMinutes[i] = stopMinute - startMinute;
                    if (numberOfMinutes[i] >= 0) {
                        numberOfHours[i] = parseFloat(stopTimeHour[i].value) - parseFloat(startTimeHour[i].value);
                    }
                    else {
                        numberOfMinutes[i] = numberOfMinutes[i] + 60;
                        numberOfHours[i] = parseFloat(stopTimeHour[i].value) - parseFloat(startTimeHour[i].value) - 1;
                    }
                    numberOfHours[i] = ((numberOfHours[i] * 60) + numberOfMinutes[i]) / 60;
                    numberOfCalcHours[i].innerHTML = numberOfHours[i].toFixed(2);

                    //Unsocial hours

                    //Check if weekend
                    if (scheduleDate[i].innerHTML.trim().substring(0, 3) == "lör" || scheduleDate[i].innerHTML.trim().substring(0, 3) == "sön") {
                        numberOfUnsocialHours[i].innerHTML = numberOfHours[i].toFixed(2);
                    }

                    //Check if early or late hours
                    else if ((parseFloat(startTimeHour[i].value) < 7) || parseFloat(stopTimeHour[i].value) >= 18) {

                        //Check if there is working time before 07:00
                        if (parseFloat(startTimeHour[i].value) < 7) {
                            //Calculate number of unsocial hours in the morning
                            if (parseFloat(stopTimeHour[i].value) < 7 || (parseFloat(stopTimeHour[i].value) == 7 && parseFloat(stopTimeMinute[i].value) == 0)) {
                                numberOfMinutes[i] = stopMinute - startMinute;
                                if (numberOfMinutes[i] >= 0) {
                                    numberOfHours[i] = parseFloat(stopTimeHour[i].value) - parseFloat(startTimeHour[i].value);
                                }
                                else {
                                    numberOfMinutes[i] = numberOfMinutes[i] + 60;
                                    numberOfHours[i] = parseFloat(stopTimeHour[i].value) - parseFloat(startTimeHour[i].value) - 1;
                                }
                            }
                            else {
                                numberOfMinutes[i] = 60 - startMinute;
                                numberOfHours[i] = 7 - parseFloat(startTimeHour[i].value) - 1;
                            }
                            numberOfMorningMinutes = numberOfMinutes[i];
                            numberOfMorningHours = numberOfHours[i];
                        }

                        //Check if there is working time after 18:00
                        if (parseFloat(stopTimeHour[i].value) >= 18) {
                            //Calculate number of unsocial hours in the evening
                            if (parseFloat(startTimeHour[i].value) >= 18) {
                                numberOfMinutes[i] = stopMinute - startMinute;
                                if (numberOfMinutes[i] >= 0) {
                                    numberOfHours[i] = parseFloat(stopTimeHour[i].value) - parseFloat(startTimeHour[i].value);
                                }
                                else {
                                    numberOfMinutes[i] = numberOfMinutes[i] + 60;
                                    numberOfHours[i] = parseFloat(stopTimeHour[i].value) - parseFloat(startTimeHour[i].value) - 1;
                                }
                            }
                            else {
                                numberOfMinutes[i] = stopMinute;
                                numberOfHours[i] = parseFloat(stopTimeHour[i].value) - 18;
                            }
                            numberOfMinutes[i] = numberOfMinutes[i] + numberOfMorningMinutes
                            numberOfHours[i] = numberOfHours[i] + numberOfMorningHours
                        }
                        numberOfHours[i] = ((numberOfHours[i] * 60) + numberOfMinutes[i]) / 60;
                        numberOfUnsocialHours[i].innerHTML = numberOfHours[i].toFixed(2);
                        numberOfMorningMinutes = 0;
                        numberOfMorningHours = 0;
                    }
                }

                //Calculate number of on call hours for each date
                if (startTimeHourOnCall[i].value != null && stopTimeHourOnCall[i].value != null && (parseFloat(stopTimeHourOnCall[i].value) >= parseFloat(startTimeHourOnCall[i].value))) {
                    numberOfMinutes[i] = stopMinuteOnCall - startMinuteOnCall;
                    if (numberOfMinutes[i] >= 0) {
                        numberOfHours[i] = parseFloat(stopTimeHourOnCall[i].value) - parseFloat(startTimeHourOnCall[i].value);
                    }
                    else {
                        numberOfMinutes[i] = numberOfMinutes[i] + 60;
                        numberOfHours[i] = parseFloat(stopTimeHourOnCall[i].value) - parseFloat(startTimeHourOnCall[i].value) - 1;
                    }
                    numberOfHours[i] = ((numberOfHours[i] * 60) + numberOfMinutes[i]) / 60;
                    numberOfOnCallHours[i].innerHTML = numberOfHours[i].toFixed(2);
                }
            }
        }
        else if (id === 2) {
            for (var i = 0; i < data.ScheduleRowList.length; i++) {
                //To be added: Check that the input is numeric, for example use var n = 'a'; if (+n === +n) { // is number }
                //To be added: Allowed range for hours and minutes? Or can that be done in the model?

                //Replace undefined minutes with minutes = 0
                if (!startTimeMinuteSI[i].value || 0 === startTimeMinuteSI[i].value.length) {
                    startMinuteSI = 0;
                }
                else {
                    startMinuteSI = parseFloat(startTimeMinuteSI[i].value);
                }
                if (!stopTimeMinuteSI[i].value || 0 === stopTimeMinuteSI[i].value.length) {
                    stopMinuteSI = 0;
                }
                else {
                    stopMinuteSI = parseFloat(stopTimeMinuteSI[i].value);
                }
                if (!startTimeMinuteOnCallSI[i].value || 0 === startTimeMinuteOnCallSI[i].value.length) {
                    startMinuteOnCallSI = 0;
                }
                else {
                    startMinuteOnCallSI = parseFloat(startTimeMinuteOnCallSI[i].value);
                }
                if (!stopTimeMinuteOnCallSI[i].value || 0 === stopTimeMinuteOnCallSI[i].value.length) {
                    stopMinuteOnCallSI = 0;
                }
                else {
                    stopMinuteOnCallSI = parseFloat(stopTimeMinuteOnCallSI[i].value);
                }

                if (startTimeHourSI[i].value != null && stopTimeHourSI[i].value != null && (parseFloat(stopTimeHourSI[i].value) >= parseFloat(startTimeHourSI[i].value))) {
                    numberOfMinutes[i] = stopMinuteSI - startMinuteSI;
                    if (numberOfMinutes[i] >= 0) {
                        numberOfHours[i] = parseFloat(stopTimeHourSI[i].value) - parseFloat(startTimeHourSI[i].value);
                    }
                    else {
                        numberOfMinutes[i] = numberOfMinutes[i] + 60;
                        numberOfHours[i] = parseFloat(stopTimeHourSI[i].value) - parseFloat(startTimeHourSI[i].value) - 1;
                    }
                    numberOfHours[i] = ((numberOfHours[i] * 60) + numberOfMinutes[i]) / 60;
                    numberOfCalcHoursSI[i].innerHTML = numberOfHours[i].toFixed(2);

                    //Unsocial hours

                    //Check if weekend
                    if (scheduleDate[i].innerHTML.trim().substring(0, 3) == "lör" || scheduleDate[i].innerHTML.trim().substring(0, 3) == "sön") {
                        numberOfUnsocialHoursSI[i].innerHTML = numberOfHours[i].toFixed(2);
                    }

                    //Check if early or late hours
                    else if ((parseFloat(startTimeHour[i].value) < 7) || parseFloat(stopTimeHourSI[i].value) >= 18) {

                        //Check if there is working time before 07:00
                        if (parseFloat(startTimeHourSI[i].value) <= 7) {
                            //Calculate number of unsocial hours in the morning
                            if (parseFloat(stopTimeHourSI[i].value) < 7 || (parseFloat(stopTimeHourSI[i].value) == 7 && parseFloat(stopTimeMinuteSI[i].value) == 0)) {
                                numberOfMinutes[i] = stopMinuteSI - startMinuteSI;
                                if (numberOfMinutes[i] >= 0) {
                                    numberOfHours[i] = parseFloat(stopTimeHourSI[i].value) - parseFloat(startTimeHourSI[i].value);
                                }
                                else {
                                    numberOfMinutes[i] = numberOfMinutes[i] + 60;
                                    numberOfHours[i] = parseFloat(stopTimeHourSI[i].value) - parseFloat(startTimeHourSI[i].value) - 1;
                                }
                            }
                            else {
                                numberOfMinutes[i] = 60 - startMinuteSI;
                                numberOfHours[i] = 7 - parseFloat(startTimeHourSI[i].value) - 1;
                            }
                            numberOfMorningMinutes = numberOfMinutes[i];
                            numberOfMorningHours = numberOfHours[i];
                        }

                        //Check if there is working time after 18:00
                        if (parseFloat(stopTimeHourSI[i].value) >= 18) {
                            //Calculate number of unsocial hours in the evening
                            if (parseFloat(startTimeHourSI[i].value) >= 18) {
                                numberOfMinutes[i] = stopMinuteSI - startMinuteSI;
                                if (numberOfMinutes[i] >= 0) {
                                    numberOfHours[i] = parseFloat(stopTimeHourSI[i].value) - parseFloat(startTimeHourSI[i].value);
                                }
                                else {
                                    numberOfMinutes[i] = numberOfMinutes[i] + 60;
                                    numberOfHours[i] = parseFloat(stopTimeHourSI[i].value) - parseFloat(startTimeHourSI[i].value) - 1;
                                }
                            }
                            else {
                                numberOfMinutes[i] = stopMinuteSI;
                                numberOfHours[i] = parseFloat(stopTimeHourSI[i].value) - 18;
                            }
                            numberOfMinutes[i] = numberOfMinutes[i] + numberOfMorningMinutes
                            numberOfHours[i] = numberOfHours[i] + numberOfMorningHours
                        }
                        numberOfHours[i] = ((numberOfHours[i] * 60) + numberOfMinutes[i]) / 60;
                        numberOfUnsocialHoursSI[i].innerHTML = numberOfHours[i].toFixed(2);
                        numberOfMorningMinutes = 0;
                        numberOfMorningHours = 0;
                    }
                }

                //Calculate number of on call hours for each date
                if (startTimeHourOnCallSI[i].value != null && stopTimeHourOnCallSI[i].value != null && (parseFloat(stopTimeHourOnCallSI[i].value) >= parseFloat(startTimeHourOnCallSI[i].value))) {
                    numberOfMinutes[i] = stopMinuteOnCallSI - startMinuteOnCallSI;
                    if (numberOfMinutes[i] >= 0) {
                        numberOfHours[i] = parseFloat(stopTimeHourOnCallSI[i].value) - parseFloat(startTimeHourOnCallSI[i].value);
                    }
                    else {
                        numberOfMinutes[i] = numberOfMinutes[i] + 60;
                        numberOfHours[i] = parseFloat(stopTimeHourOnCallSI[i].value) - parseFloat(startTimeHourOnCallSI[i].value) - 1;
                    }
                    numberOfHours[i] = ((numberOfHours[i] * 60) + numberOfMinutes[i]) / 60;
                    numberOfOnCallHoursSI[i].innerHTML = numberOfHours[i].toFixed(2);
                }
            }
        }
    }

    function copyToStandin() {

        var data = @Html.Raw(JsonConvert.SerializeObject(this.Model));
        //alert(data.ScheduleRowList.length)

        var startTimeHour = document.getElementsByClassName("start-time-hour");
        var startTimeMinute = document.getElementsByClassName("start-time-minute");
        var stopTimeHour = document.getElementsByClassName("stop-time-hour");
        var stopTimeMinute = document.getElementsByClassName("stop-time-minute");

        var startTimeHourOnCall = document.getElementsByClassName("start-time-hour-oncall");
        var startTimeMinuteOnCall = document.getElementsByClassName("start-time-minute-oncall");
        var stopTimeHourOnCall = document.getElementsByClassName("stop-time-hour-oncall");
        var stopTimeMinuteOnCall = document.getElementsByClassName("stop-time-minute-oncall");

        var numberOfCalcHours = document.getElementsByClassName("number-of-hours");
        var numberOfUnsocialHours = document.getElementsByClassName("number-of-unsocial-hours");
        var numberOfOnCallHours = document.getElementsByClassName("number-of-oncall-hours");

        var startTimeHourSI = document.getElementsByClassName("start-time-hour-si");
        var startTimeMinuteSI = document.getElementsByClassName("start-time-minute-si");
        var stopTimeHourSI = document.getElementsByClassName("stop-time-hour-si");
        var stopTimeMinuteSI = document.getElementsByClassName("stop-time-minute-si");

        var startTimeHourOnCallSI = document.getElementsByClassName("start-time-hour-oncall-si");
        var startTimeMinuteOnCallSI = document.getElementsByClassName("start-time-minute-oncall-si");
        var stopTimeHourOnCallSI = document.getElementsByClassName("stop-time-hour-oncall-si");
        var stopTimeMinuteOnCallSI = document.getElementsByClassName("stop-time-minute-oncall-si");

        var numberOfCalcHoursSI = document.getElementsByClassName("number-of-hours-si");
        var numberOfUnsocialHoursSI = document.getElementsByClassName("number-of-unsocial-hours-si");
        var numberOfOnCallHoursSI = document.getElementsByClassName("number-of-oncall-hours-si");

        for (var i = 0; i < data.ScheduleRowList.length; i++) {
            if (startTimeHour[i].value != null) {
                startTimeHourSI[i].value = startTimeHour[i].value;
            }
            if (startTimeMinute[i].value != null) {
                startTimeMinuteSI[i].value = startTimeMinute[i].value;
            }
            else {
                startTimeMinute[i].value = "00";
                startTimeMinuteSI[i].value = "00";
            }
            if (stopTimeHour[i].value != null) {
                stopTimeHourSI[i].value = stopTimeHour[i].value;
            }
            if (stopTimeMinute[i].value != null) {
                stopTimeMinuteSI[i].value = stopTimeMinute[i].value;
            }
            else {
                stopTimeMinute[i].value = "00";
                stopTimeMinuteSI[i].value = "00";
            }

            if (startTimeHourOnCall[i].value != null) {
                startTimeHourOnCallSI[i].value = startTimeHourOnCall[i].value;
            }
            if (startTimeMinuteOnCall[i].value != null) {
                startTimeMinuteOnCallSI[i].value = startTimeMinuteOnCall[i].value;
            }
            else {
                startTimeMinuteOnCall[i].value = "00";
                startTimeMinuteOnCallSI[i].value = "00";
            }
            if (stopTimeHourOnCall[i].value != null) {
                stopTimeHourOnCallSI[i].value = stopTimeHourOnCall[i].value;
            }
            if (stopTimeMinuteOnCall[i].value != null) {
                stopTimeMinuteOnCallSI[i].value = stopTimeMinuteOnCall[i].value;
            }
            else {
                stopTimeMinuteOnCall[i].value = "00";
                stopTimeMinuteOnCallSI[i].value = "00";
            }

            if (numberOfCalcHours[i].innerHTML != null) {
                numberOfCalcHoursSI[i].innerHTML = numberOfCalcHours[i].innerHTML.trim();
            }
            if (numberOfUnsocialHours[i].innerHTML != null) {
                numberOfUnsocialHoursSI[i].innerHTML = numberOfUnsocialHours[i].innerHTML.trim();
            }
            if (numberOfOnCallHours[i].innerHTML != null) {
                numberOfOnCallHoursSI[i].innerHTML = numberOfOnCallHours[i].innerHTML.trim();
            }
        }
    }

    function copyHoursToStandin() {

        var data = @Html.Raw(JsonConvert.SerializeObject(this.Model));

        var numberOfHours = document.getElementsByClassName("hours");
        var unsocialEvening = document.getElementsByClassName("unsocial-evening");
        var unsocialNight = document.getElementsByClassName("unsocial-night");
        var unsocialWeekend = document.getElementsByClassName("unsocial-weekend");
        var unsocialGrandWeekend = document.getElementsByClassName("unsocial-grandweekend");
        var oncallDay = document.getElementsByClassName("oncall-day");
        var oncallNight = document.getElementsByClassName("oncall-night");

        var numberOfHoursSI = document.getElementsByClassName("hours-si");
        var unsocialEveningSI = document.getElementsByClassName("unsocial-evening-si");
        var unsocialNightSI = document.getElementsByClassName("unsocial-night-si");
        var unsocialWeekendSI = document.getElementsByClassName("unsocial-weekend-si");
        var unsocialGrandWeekendSI = document.getElementsByClassName("unsocial-grandweekend-si");
        var oncallDaySI = document.getElementsByClassName("oncall-day-si");
        var oncallNightSI = document.getElementsByClassName("oncall-night-si");


        for (var i = 0; i < data.ScheduleRowList.length; i++) {
            if (numberOfHours[i].value != null) {
                numberOfHoursSI[i].value = numberOfHours[i].value;
            }
            else {
                numberOfHours[i].value = "0,00";
                numberOfHoursSI[i].value = "0,00";
            }

            if (unsocialEvening[i].value != null) {
                unsocialEveningSI[i].value = unsocialEvening[i].value;
            }
            else {
                unsocialEvening[i].value = "0,00";
                unsocialEveningSI[i].value = "0,00";
            }

            if (unsocialNight[i].value != null) {
                unsocialNightSI[i].value = unsocialNight[i].value;
            }
            else {
                unsocialNight[i].value = "0,00";
                unsocialNightSI[i].value = "0,00";
            }

            if (unsocialWeekend[i].value != null) {
                unsocialWeekendSI[i].value = unsocialWeekend[i].value;
            }
            else {
                unsocialWeekend[i].value = "0,00";
                unsocialWeekendSI[i].value = "0,00";
            }

            if (unsocialGrandWeekend[i].value != null) {
                unsocialGrandWeekendSI[i].value = unsocialGrandWeekend[i].value;
            }
            else {
                unsocialGrandWeekend[i].value = "0,00";
                unsocialGrandWeekendSI[i].value = "0,00";
            }

            if (oncallDay[i].value != null) {
                oncallDaySI[i].value = oncallDay[i].value;
            }
            else {
                oncallDay[i].value = "0,00";
                oncallDaySI[i].value = "0,00";
            }

            if (oncallNight[i].value != null) {
                oncallNightSI[i].value = oncallNight[i].value;
            }
            else {
                oncallNight[i].value = "0,00";
                oncallNightSI[i].value = "0,00";
            }
        }
    }

    $(function () {
        $(".js-show-view-btn").click(function (e) {
            e.preventDefault();
            var $buttonClicked = $(this);
            var options = {
                "backdrop": "static",
                keyboard: true
            };
            $.ajax({
                method: "GET",
                url: "/Claims/_ShowClaim",
                contentType: "application/json; charset=utf-8",
                datatype: "json",
                data: { refNumber: this.innerHTML },
                cache: false,
                success: function (data, textStatus, jqXHR) {
                    $("#myModalContent").html(data);
                    $("#myModal").modal(options);
                    $("#myModal").modal('show');
                }
            });
        })
        $("#closbtn").click(function () {
            $('#myModal').modal('hide');
        });
    });

    //$('#loadPartialActionLink').on('click', function (e) {
    //    e.preventDefault();
    //    var claimNumber = document.getElementById("claimnumber");
    //    $.ajax({
    //        type: "GET",
    //        url: '/Claims/_ShowClaim',
    //        data: {
    //            refNumber: claimNumber.innerHTML
    //        },
    //        success: function (data, textStatus, jqXHR) {
    //            $('#AJAXContainer').html(data);
    //        }
    //    });
    //});
</script>