@model Sjuklöner.Viewmodels.Create1VM
@using Newtonsoft.Json

@{
    ViewBag.Title = "Create1";
}

<div class="row margin-breadcrumb">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item breadcrumb-font">@Html.ActionLink("Ansökningar", "Index", null, new { @class = "breadcrumb-padding" })</li>
            <li class="breadcrumb-item active breadcrumb-font breadcrumb-padding" aria-current="page">Personuppgifter och sjukperiod</li>
        </ol>
    </nav>
</div>

@using (Html.BeginForm("Create1", "Claims", new { refNumber = Model.ClaimNumber }, FormMethod.Post))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.ClaimNumber)
    @Html.HiddenFor(model => model.OrganisationNumber)
    for (int i = 0; i < Model.AssistantIds.Count(); i++)
    {
        @Html.HiddenFor(model => model.AssistantIds[i])
    }

    <div class="row">
        <p class="page-header10 col col-md-9">Ansökan om sjuklöneersättning</p>
        <div class="col col-md-1 no-col-padding">
            @Html.EditorFor(model => model.NumberOfSubAssistants, new { htmlAttributes = new { @class = "form-control", id = "ddl-counter" } })

            @*Used for counting number of substitute assistants*@
            @*<label for="NumberOfSubAssistants" id="ddl-counter" class="cols-sm-2 control-label">
            @Html.Hidden("NumberOfSubAssistants", "")
        </label>*@
        </div>
        <div class="col col-md-1 no-col-padding">
            @*Used for counting number of substitute assistants*@
            @for (int i = 0; i < 20; i++)
            {
                @Html.EditorFor(model => model.SelectedSubIndeces[i], new { htmlAttributes = new { @class = "form-control selectedSubIndex" } })
                @*<label for="SelectedSubIndeces[i]" class="cols-sm-2 control-label selectedSubIndex">
                    @Html.Hidden("SelectedSubIndeces[i]", "")
                </label>*@
            }
        </div>
        <br>
    </div>
    <div class="row">
        <p class="col col-md-10 second-page-header5">Steg 1 av 4: Ange personuppgifter och sjukperiod</p>
    </div>

    @Html.ValidationSummary(true, "", new { @class = "text-danger font-size-11" })

    <div class="row">
    </div>
    <div class="no-col-padding col col-md-6 display-inline-block">
        <div class="row">
            <div class="col col-md-6">
                @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "create1-label control-label" })
            </div>
            <div class="col col-md-6">
                @Html.LabelFor(model => model.RegularAssistants, htmlAttributes: new { @class = "create1-label control-label" })
            </div>
        </div>

        <div class="row row-height-36">
            <div class="col col-md-6">
                @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col col-md-6">
                @Html.DropDownListFor(model => model.SelectedRegAssistantId, new SelectList(Model.RegularAssistants, "Value", "Text", Model.SelectedRegAssistantId), "- ingen vald -", new { @class = "form-control" })
            </div>
        </div>

        <div class="row row-validation-20 line-height-07">
            <div class="col col-md-6">
                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger font-size-11" })
            </div>
            <div class="col col-md-6">
                @Html.ValidationMessageFor(model => model.RegularAssistants, "", new { @class = "text-danger font-size-11" })
            </div>
        </div>

        <div class="row">
            <div class="col col-md-6">
                @Html.LabelFor(model => model.CustomerSSN, htmlAttributes: new { @class = "create1-label control-label" })
            </div>
            <div class="col col-md-6">
                @Html.LabelFor(model => model.FirstDayOfSicknessDate, htmlAttributes: new { @class = "create1-label control-label" })
            </div>
        </div>

        <div class="row row-height-36">
            <div class="col col-md-6">
                @Html.EditorFor(model => model.CustomerSSN, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col col-md-6">
                @Html.EditorFor(model => model.FirstDayOfSicknessDate, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="row row-validation-20 line-height-07">
            <div class="col col-md-6">
                @Html.ValidationMessageFor(model => model.CustomerSSN, "", new { @class = "text-danger font-size-11" })
            </div>
            <div class="col col-md-6">
                @Html.ValidationMessageFor(model => model.FirstDayOfSicknessDate, "", new { @class = "text-danger font-size-11" })
            </div>
        </div>

        <div class="row">
            <div class="col col-md-6">
                @Html.LabelFor(model => model.CustomerPhoneNumber, htmlAttributes: new { @class = "create1-label control-label" })
            </div>
            <div class="col col-md-6">
                @Html.LabelFor(model => model.LastDayOfSicknessDate, htmlAttributes: new { @class = "create1-label control-label" })
            </div>
        </div>

        <div class="row row-height-36">
            <div class="col col-md-6">
                @Html.EditorFor(model => model.CustomerPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
            </div>
            <div class="col col-md-6">
                @Html.EditorFor(model => model.LastDayOfSicknessDate, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="row row-validation-20 line-height-07">
            <div class="col col-md-6">
                @Html.ValidationMessageFor(model => model.CustomerPhoneNumber, "", new { @class = "text-danger font-size-11" })
            </div>
            <div class="col col-md-6">
                @Html.ValidationMessageFor(model => model.LastDayOfSicknessDate, "", new { @class = "text-danger font-size-11" })
            </div>
        </div>

        <div class="row row-height-20">
            <div class="col col-md-6">
            </div>
            <div class="col col-md-6">
            </div>
        </div>

        <div class="row row-height-36">
            <div class="col col-md-6">
                <div class="no-col-padding col col-md-4">
                    <input class="btn btn-primary btn-primary-small2" type="submit" name="submitButton" value="Till steg 2" id="proceed" />
                    @*<input class="btn btn-primary btn-primary-small2" type="submit" name="submitButton" value="Till steg 2" id="proceed" onclick="saveSelectedIndeces()" />*@
                </div>
                <div class="no-col-padding col col-md-4">
                    <input class="btn btn-secondary btn-secondary-small2 btn-left-margin-1" type="submit" name="submitButton" value="Spara" id="save" />
                    @*<input class="btn btn-secondary btn-secondary-small2 btn-left-margin-1" type="submit" name="submitButton" value="Spara" id="save" onclick="saveSelectedIndeces()" />*@
                </div>
                <div class="no-col-padding col col-md-4">
                    @Html.ActionLink("Avbryt", "IndexPageOmbud", null, new { @class = "btn btn-secondary btn-secondary-small2 btn-left-margin-2" })
                </div>
            </div>
            <div class="col col-md-6">
                @if (Model.CompletionStage >= 1)
                {
                    <div class="row">
                        <div class="btn-left-margin-15">
                            @Html.ActionLink(Model.ClaimNumber, "_ShowClaim", new { refNumber = Model.ClaimNumber }, new { @class = "js-show-view-btn btn btn-secondary btn-secondary-small" })
                            @*<a type="button" class="btn btn-secondary btn-secondary-small btn-left-margin-5" href="#" id="loadPartialActionLink">@Model.ClaimNumber</a>*@
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="row row-validation-20 line-height-07">
            <div class="col col-md-6">
            </div>
            <div class="col col-md-6">
            </div>
        </div>
    </div>

    <div id="anchor-beyond4ddls" class="col col-md-6 display-inline-block">
        <div class="row">
            <div class="col col-md-8">
                @Html.LabelFor(model => model.SubstituteAssistants, htmlAttributes: new { @class = "create1-label control-label" })
            </div>
        </div>

        <div class="row row-height-36">
            <div class="col col-md-8 right-col-padding-42">
                @Html.DropDownListFor(model => model.SelectedSubAssistantId, new SelectList(Model.SubstituteAssistants, "Value", "Text", Model.SelectedSubAssistantId), "- ingen vald -", new { id = "subassistant1-ddl", @class = "display-inline-block form-control" })
                <input id="Button+" class="btn btn btn-primary btn-primary-xsmall5 float-right" type="button" value="+" onclick="addsubassistant_onclick()" />
            </div>
        </div>

        <div class="row row-validation-20 row-height-20 line-height-07">
            <div class="no-col-padding col col-md-8">
                @Html.ValidationMessageFor(model => model.SubstituteAssistants, "", new { @class = "text-danger font-size-11" })
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script>
    $(function () {
        $(".js-show-view-btn").click(function (e) {
            e.preventDefault();
            var $buttonClicked = $(this);
            var options = {
                "backdrop": "static",
                keyboard: true
            };
            $.ajax({
                method: "GET",
                url: "/Claims/_ShowClaim",
                contentType: "application/json; charset=utf-8",
                datatype: "json",
                data: { refNumber: this.innerHTML },
                cache: false,
                success: function (data, textStatus, jqXHR) {
                    $("#myModalContent").html(data);
                    $("#myModal").modal(options);
                    $("#myModal").modal('show');
                }
            });
        })
        $("#closbtn").click(function () {
            $('#myModal').modal('hide');
        });

    });

    var NumOfRow = 1;

    function addsubassistant_onclick() {
        var data = @Html.Raw(JsonConvert.SerializeObject(this.Model));

        //NumOfRow++;

        //initiate a variable that will hold the ddl of the 1st substitute assistant
        var ddl1 = document.getElementById('subassistant1-ddl');

        //count the number of items there are in the 1st substitute assistant ddl
        var assistantcounter = ddl1.childElementCount;

        //get the number of substitute assistants used in this claim
        var assistantddlcounter = document.getElementById('ddl-counter');
        //var numberOfSubAssistants = document.getElementById('ddl-counter');

        var subassddlcounterInt = parseInt(assistantddlcounter.value);
        NumOfRow = subassddlcounterInt + 1;

        //get the reference of the anchor div
        var mainDiv = document.getElementById('anchor-beyond4ddls');

        //create new div that will work as an outer container for the label
        var newOuterLabelDiv = document.createElement('div');
        newOuterLabelDiv.setAttribute('id', 'outerLabelDiv' + NumOfRow);
        newOuterLabelDiv.setAttribute('class', 'row subass-outerlabel');

        var newInnerLabelDiv = document.createElement('div');
        newInnerLabelDiv.setAttribute('id', 'innerLabelDiv' + NumOfRow);
        newInnerLabelDiv.setAttribute('class', 'col col-md-8 subass-innerlabel');

        var newOuterDdlDiv = document.createElement('div');
        newOuterDdlDiv.setAttribute('id', 'outerDdlDiv' + NumOfRow);
        newOuterDdlDiv.setAttribute('class', 'row row-height-36 subass-outerddl');

        var newInnerDdlDiv = document.createElement('div');
        newInnerDdlDiv.setAttribute('id', 'innerDdlDiv' + NumOfRow);
        newInnerDdlDiv.setAttribute('class', 'col col-md-8 right-col-padding-42 subass-innerddl');

        var newOuterValDiv = document.createElement('div');
        newOuterValDiv.setAttribute('id', 'outerValDiv' + NumOfRow);
        newOuterValDiv.setAttribute('class', 'row row-validation-20 row-height-20 line-height-07 subass-outerval');

        var newInnerValDiv = document.createElement('div');
        newInnerValDiv.setAttribute('id', 'innerValDiv' + NumOfRow);
        newInnerValDiv.setAttribute('class', 'col col-md-8 subass-innerval');


        var newLabel = document.createElement('label');
        newLabel.setAttribute('class', 'create1-label control-label subass-label');
        newLabel.innerText = "Vikarierande assistent " + NumOfRow.toString();

        var newDropDownList = document.createElement('select');
        newDropDownList.id = 'ddl' + NumOfRow;
        newDropDownList.setAttribute('class', 'display-inline-block form-control subass-ddl');
        newDropDownList.setAttribute('data-val', 'true');
        newDropDownList.setAttribute('data-val-range-min', '1');
        newDropDownList.setAttribute('data-val-range-max', '999999');
        newDropDownList.setAttribute('data-val-range', 'En vikarierande assistent måste väljas');

        var newSpan = document.createElement('span');
        newSpan.setAttribute('class', 'field-validation-valid text-danger font-size-11');
        newSpan.setAttribute('data-valmsg-replace', 'true');
        newSpan.setAttribute('data-valmsg-for', '');

        var newSpan2 = document.createElement('span');
        newSpan2.setAttribute('class', 'selecteditem');
        newSpan2.id = 'span' + NumOfRow;
        newSpan2.innerText = 0;


        //copy options to the new ddl
        for (var i = 0; i < assistantcounter; i++) {
            var option = document.createElement('option');
            option.text = ddl1[i].innerText;
            //if (i === 0) {
            option.value = i;
            //}
            option.setAttribute('class', 'option' + NumOfRow);
            option.onclick = function UpdateSelectedItem() {
                var idx = this.className.substring(6);
                var selectIdx = this.value;
                var selectedItemSpan = document.getElementById('span' + idx);
                selectedItemSpan.innerText = selectIdx;

                //update the array that holds the selected sub assistant indeces
                //reset all indeces to make sure that no indeces that have been removed and still remain in selectedSubIndex also are removed
                var assistantddlcounter = document.getElementById('ddl-counter');
                var subassddlcounterInt = parseInt(assistantddlcounter.value);

                var items = document.getElementsByClassName('selecteditem');
                var selectedItems = document.getElementsByClassName('selectedSubIndex');
                for (var i = 0; i < subassddlcounterInt - 1; i++) {
                    selectedItems[i].value = 0;
                }

                //load current indeces
                for (var i = 0; i < subassddlcounterInt - 1; i++) {
                    selectedItems[i].value = parseInt(items[i].innerText);
                }
            }
            newDropDownList.add(option, newDropDownList.options[i]);
        }

        newDropDownList.selectedIndex = 0;


        //increment the counter holding the number of sub assistant ddls
        assistantddlcounter.value = subassddlcounterInt + 1;



        //create remove button for each email adress
        var newButton = document.createElement('input');
        newButton.type = 'button';
        newButton.value = '-';
        newButton.id = 'btn' + NumOfRow;
        newButton.setAttribute('class', 'btn btn-primary btn-primary-xsmall6 float-right minusbutton');

        //attach event for remove button click
        newButton.onclick = function RemoveEntry() {
            var idx = this.id.substring(3);

            var labelDiv = document.getElementById('outerLabelDiv' + idx);
            var ddlDiv = document.getElementById('outerDdlDiv' + idx);
            var valDiv = document.getElementById('outerValDiv' + idx);
            labelDiv.remove();
            ddlDiv.remove();
            valDiv.remove();

            //decrement the counter holding the number of sub assistant ddls
            var subassddlcounterInt = parseInt(assistantddlcounter.value);
            assistantddlcounter.value = subassddlcounterInt - 1;

            var labels = document.getElementsByClassName('subass-label');
            for (var i = 0; i < subassddlcounterInt - 2; i++) {
                labels[i].innerText = "Vikarierande assistent " + (i + 2).toString();
            }

            //update the array that holds the selected sub assistant indeces
            //reset all indeces to make sure that no indeces that have been removed and still remain in selectedSubIndex also are removed
            var items = document.getElementsByClassName('selecteditem');
            var selectedItems = document.getElementsByClassName('selectedSubIndex');
            for (var i = 0; i < subassddlcounterInt - 1; i++) {
                selectedItems[i].value = 0;
            }

            //load current indeces
            for (var i = 0; i < subassddlcounterInt - 2; i++) {
                selectedItems[i].value = parseInt(items[i].innerText);
            }

            //rename ids for label-, ddl- and validationmessage divs, rename options classes, rename ids for selecteditem spans and for minusbuttons
            var innerlabels = document.getElementsByClassName('subass-innerlabel');
            for (var i = 0; i < subassddlcounterInt - 2; i++) {
                innerlabels[i].id = 'innerLabelDiv' + (i + 2).toString();
            }

            var outerlabels = document.getElementsByClassName('subass-outerlabel');
            for (var i = 0; i < subassddlcounterInt - 2; i++) {
                outerlabels[i].id = 'outerLabelDiv' + (i + 2).toString();
            }

            var innerddls = document.getElementsByClassName('subass-innerddl');
            for (var i = 0; i < subassddlcounterInt - 2; i++) {
                innerddls[i].id = 'innerDdlDiv' + (i + 2).toString();
            }

            var outerddls = document.getElementsByClassName('subass-outerddl');
            for (var i = 0; i < subassddlcounterInt - 2; i++) {
                outerddls[i].id = 'outerDdlDiv' + (i + 2).toString();
            }

            var innervals = document.getElementsByClassName('subass-innerval');
            for (var i = 0; i < subassddlcounterInt - 2; i++) {
                innervals[i].id = 'innerValDiv' + (i + 2).toString();
            }

            var outervals = document.getElementsByClassName('subass-outerval');
            for (var i = 0; i < subassddlcounterInt - 2; i++) {
                outervals[i].id = 'outerValDiv' + (i + 2).toString();
            }

            var ddl = document.getElementsByClassName('subass-ddl');
            for (var i = 0; i < subassddlcounterInt - 2; i++) {
                ddl[i].id = 'ddl' + (i + 2).toString();
                var options = ddl[i].children;
                for (var k = 0; k < options.length; k++) {
                    options[k].className = 'option' + (i + 2).toString();
                }
            }

            var selecteditems = document.getElementsByClassName('selecteditem');
            for (var i = 0; i < subassddlcounterInt - 2; i++) {
                selecteditems[i].id = 'span' + (i + 2).toString();
            }

            var minusbuttons = document.getElementsByClassName('minusbutton');
            for (var i = 0; i < subassddlcounterInt - 2; i++) {
                minusbuttons[i].id = 'btn' + (i + 2).toString();
            }
        }

        newInnerLabelDiv.appendChild(newLabel);
        newOuterLabelDiv.appendChild(newInnerLabelDiv);
        newInnerDdlDiv.appendChild(newDropDownList);
        newInnerDdlDiv.appendChild(newSpan2);
        newInnerDdlDiv.appendChild(newButton);
        newOuterDdlDiv.appendChild(newInnerDdlDiv);
        newInnerValDiv.appendChild(newSpan);
        newOuterValDiv.appendChild(newInnerValDiv);

        // finally append the new div to the main div
        mainDiv.appendChild(newOuterLabelDiv);
        mainDiv.appendChild(newOuterDdlDiv);
        mainDiv.appendChild(newOuterValDiv);
    }

    function saveSelectedIndeces() {
        //get the number of substitute assistants used in this claim
        var assistantddlcounter = document.getElementById('ddl-counter');
        var subassddlcounterInt = parseInt(assistantddlcounter.innerText);
        var items = document.getElementsByClassName('selecteditem');
        var selectedItems = document.getElementsByClassName('selectedSubIndex');

        //reset all indeces to make sure that no indeces that have been removed and still remain in selectedSubIndex also are removed
        for (var i = 0; i < 20; i++) {
            selectedItems[i].innerText = 0;
        }

        //load current indeces
        for (var i = 0; i < subassddlcounterInt; i++) {
            selectedItems[i].innerHtml = items[i].innerText;
        }
    }
</script>
